{"version":3,"sources":["n1-main/m3-dal/auth-api.ts","n1-main/m3-dal/api.ts","n1-main/m2-bll/appReducer.ts","n1-main/m2-bll/loginReducer.tsx","n1-main/m1-ui/common/Button/Button.tsx","n1-main/m1-ui/components/logout/Logout.tsx","n1-main/m1-ui/header/Header.tsx","n1-main/m1-ui/common/Error404.tsx","n1-main/m2-bll/registerReducer.ts","n1-main/m1-ui/components/registration/Registration.tsx","n1-main/m3-dal/forgot-api.ts","n1-main/m2-bll/forgotReducer.ts","n1-main/m1-ui/components/forgotPassword/ForgotPassword.tsx","n1-main/m1-ui/components/profile/Profile.tsx","n1-main/m1-ui/components/login/Login.tsx","n1-main/m2-bll/packReducer.ts","n1-main/m1-ui/components/searchPack/SearchPack.tsx","n1-main/m2-bll/searchReducer.tsx","n1-main/m2-bll/cardsReducer.ts","n1-main/m1-ui/components/searchPack/SearchTable.tsx","n1-main/m1-ui/components/searchPack/Paginator.tsx","n1-main/m1-ui/components/packs/Packs.tsx","n1-main/m1-ui/components/cards/Cards.tsx","n1-main/m1-ui/routes/Routes.tsx","n1-main/m1-ui/App.tsx","reportWebVitals.ts","n1-main/m2-bll/store.ts","index.tsx","n1-main/m1-ui/header/Header.module.css","n1-main/m1-ui/components/cards/Cards.module.css","n1-main/m1-ui/components/searchPack/searchPack.module.css","n1-main/m1-ui/components/packs/Packs.module.css","n1-main/m1-ui/components/registration/Registration.module.css"],"names":["instance","axios","create","baseURL","withCredentials","authAPI","email","password","rememberMe","post","delete","searchAPI","packName","get","Api","then","response","data","page","title","cardsPack","name","id","newPackName","put","_id","packId","question","answer","card","cardsPack_id","initialState","status","error","isInitialized","setAppInitializedAC","type","isLoggedIn","errorText","loadingStatus","setIsLoggedInAC","value","setErrorTextLoggedInAC","setAppStatusAC","Button","onBlur","disabled","onClick","primary","size","backgroundColor","label","props","mode","className","join","style","Logout","React","memo","dispatch","useDispatch","useSelector","state","login","a","to","Header","app","s","nav","item","activeClassName","active","Error404","addedUser","setErrorTextAC","setLoadingStatusAC","Registration","register","useState","mail","setMail","setPassword","checkPassword","setCheckPassword","onChange","e","currentTarget","res","undefined","catch","SendRegisterTC","cardAPI","from","message","forgotPassword","forgotPasswordAC","setAppErrorAC","ForgotPassword","setValue","statusApp","store","serverError","useCallback","finally","marginTop","color","trim","display","marginLeft","marginRight","marginBottom","Profile","Login","pass","setPass","changCheckboxLoggedInAC","checked","loginTC","cardPacks","newPackTitle","cardPacksTotalCount","pageCount","portionSize","setPacksAC","getPacksTC","setCurrentPage","SearchPack","filter","setFilter","searchPack","cards","cardId","setCardsAC","SearchTable","search_table","slider","range","draggableTrack","defaultValue","Paginator","packs","currentPage","pagesCount","Math","ceil","pages","i","push","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","paginator","p","map","cn","selectedPage","pageNumber","onPageChanged","Packs","writtenTitlePack","setWrittenTitlePack","inputPackTitle","setInputPackTitle","inputChangeTitle","setInputChangeTitle","ChangeTitle","setChangeTitle","useEffect","showCards","getCardsTC","deletePack","backgroundForWindow","inputWindow","placeholder","inputTitlePack","inputChangeTitlePack","updatePackTitleTC","table","packData","cardsCount","created","updated","pack","find","setPackIdAC","changeTitle","Cards","setQuestion","setAnswer","cardTitle","setCardTitle","onChangeQuestion","onChangeAnswer","deleteCard","deleteCardsTC","inputQuestion","inputAnswer","addCardTC","quesrion","updateCardTitleTC","length","grade","shots","setCardIdAC","Routes","exact","path","render","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.d086327c.chunk.js","sourcesContent":["import axios from \"axios\"\n\nconst instance = axios.create({\n    // baseURL: \"http://localhost:7542/2.0/\",\n    baseURL: \"https://neko-back.herokuapp.com/2.0/\",\n    withCredentials: true\n})\n\n// api\nexport const authAPI = {\n    login(email: string, password: string, rememberMe: boolean = false) {\n        return instance.post<LoginParamsType>(`auth/login`, {email, password, rememberMe})\n    },\n    logout() {\n        return instance.delete(`auth/me`, {});\n    }\n}\n\n\nexport const searchAPI = {\n    search(packName: string) {\n        return instance.get(`cards/pack?packName=${packName}&pageCount=10`);\n    }\n}\n\n\n\n// types\nexport type LoginParamsType = {\n    email: string\n    password: string\n    rememberMe?: boolean\n}\nexport type ResponseType = {\n    _id: string;\n    email: string;\n    name: string;\n    avatar?: string;\n    publicCardPacksCount: number; // количество колод\n    created: Date;\n    updated: Date;\n    isAdmin: boolean;\n    verified: boolean; // подтвердил ли почту\n    rememberMe: boolean;\n    error?: string;\n}\n\n\n","import axios from \"axios\";\n\n\nconst instance = axios.create({\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\n    withCredentials: true,\n})\nexport const  Api = {\n    postDataRegister(email: string, password: string)  {\n        return instance.post('auth/register', {email, password})\n            .then(response =>   response.data)\n    },\n    getPacks(page: number) {\n        return instance.get<GetCardPackResponseType>(`cards/pack?pageCount=10&page=${page}`)\n            .then(response =>   response.data)\n    },\n    postNewPack(title: string) {\n        return instance.post<PostOrDeleteResponseType>(`cards/pack`, {cardsPack: {name: title}})\n            .then(response => response.data)\n    },\n    deletePack(id: string) {\n        let promise = instance.delete<PostOrDeleteResponseType>(`cards/pack?id=${id}`)\n        return promise\n            .then(response => response.data)\n    },\n    updatePack(newPackName: string, id: string) {\n        let promise = instance.put<any>(`cards/pack?id=${id}`, {cardsPack: {name: newPackName, _id: id }})\n        return promise\n            .then(response => response.data)\n    },\n    getCards(packId: string) {\n        let promise = instance.get<CardsDataType>(`cards/card?&cardsPack_id=${packId}&pageCount=10`);\n        return promise\n            .then(response => response.data)\n    },\n    postNewCard(question: string, answer: string, packId: string) {\n        return instance.post(`cards/card`, {card: {question: question, answer: answer, cardsPack_id: packId}})\n            .then(response => response.data)\n    },\n    me() {\n        const promise = instance.post<MeType>('auth/me');\n        return promise\n            .then(response => response.data)\n    },\n    deleteCard(id: string) {\n        let promise = instance.delete(`cards/card?id=${id}`)\n        return promise\n            .then(response => response.data)\n    },\n    updateCard(question: string, answer: string, id: string) {\n        let promise = instance.put<any>(`cards/card`, {card: {_id: id , question: question, answer: answer}})\n        return promise\n            .then(response => response.data)\n    }\n}\n\ntype GetCardPackResponseType = {\n    // pageCount: number\n    // page: number\n    [key: string] : Array<CardPackType>\n}\n\nexport  type CardPackType = {\n    \"_id\": string\n    \"user_id\": string\n    \"user_name\": string\n    \"private\": boolean\n    \"name\": string\n    \"path\": string\n    \"grade\": number\n    \"shots\": number\n    \"cardsCount\": number\n    \"type\": string\n    \"rating\": number\n    \"created\": string\n    \"updated\": string\n    \"more_id\": string\n    \"__v\": number\n}\n\ntype PostOrDeleteResponseType = {\n    cardPacks: Array<CardPackType>\n    cardPacksTotalCount: number\n    maxCardsCount: number\n    minCardsCount: number\n    page: number\n    pageCount: number\n    token: string\n    tokenDeathTime: number\n}\n\nexport type CardType = {\n    answer: string\n    question: string\n    cardsPack_id: string\n    grade: number\n    rating: number\n    shots: number\n    type: string\n    user_id: string\n    created: string\n    updated: string\n    __v: number\n    _id: string\n}\n\nexport type CardsDataType = {\n    cards: Array<CardType>\n    cardsTotalCount: number\n    maxGrade: number\n    minGrade: number\n    page: number\n    pageCount: number\n    packUserId: string\n}\n\n// type DeleteCardResponceType = {\n//     deletedCard:\n//         answer: \"OOjjOO\"\n//     cardsPack_id: \"60a508fe94de4b00046c1e2c\"\n//     comments: \"\"\n//     created: \"2021-05-19T13:27:08.251Z\"\n//     grade: 0\n//     more_id: \"60a3812fd0411e000441aa0e\"\n//     question: \"DDgggDD\"\n//     rating: 0\n//     shots: 0\n//     type: \"card\"\n//     updated: \"2021-05-19T13:27:08.251Z\"\n//     user_id: \"60a3812fd0411e000441aa0e\"\n//     __v: 0\n//     _id: \"60a5122c94de4b00046c1e30\"\n//     __proto__: Object\n//     token: \"d0a04b60-b8a6-11eb-9f11-8fc7ff1ef88a\"\n//     tokenDeathTime: 1621442016918\n// }\n\n\ntype MeType = {\n    _id: string;\n    email: string;\n    name: string;\n    avatar?: string;\n    publicCardPacksCount: number;\n    created: Date;\n    updated: Date;\n    isAdmin: boolean;\n    verified: boolean;\n    error?: string;\n}\n\n\n\n","\nimport {setIsLoggedInAC} from \"./loginReducer\";\nimport {Api} from \"../m3-dal/api\";\nimport {Dispatch} from \"redux\";\n\nconst initialState: InitialStateType = {\n    status: 'idle',\n    error: null,\n    isInitialized: false\n}\n\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n\n        case 'APP/SET-STATUS':\n            return {...state, status: action.status}\n        case 'APP/SET-ERROR':\n            return {...state, error: action.error}\n        case 'SET-IS-INITIALIZED':\n            let a = {...state, isInitialized: action.isInitialized }\n            return  a\n        default:\n            return {...state}\n    }\n}\n\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\n    Api.me().then(res => {\n        // dispatch(setLoadingStatusAC('loading'))\n        dispatch(setAppInitializedAC(true))\n            dispatch(setIsLoggedInAC(true));\n    })\n        .catch(error => {\n            // dispatch(setAppErrorAC(error.response.data.error))\n            dispatch(setAppInitializedAC(false))\n            // dispatch(setIsLoggedInAC(false))\n        })\n        // .finally(() => {\n        //     dispatch(setLoadingStatusAC('succeeded'))\n        // })\n}\n\nexport type RequestStatusType =  'idle' | 'loading' | 'succeeded' | 'failed'\nexport type InitialStateType = {\n    // происходит ли сейчас взаимодействие с сервером\n    status: RequestStatusType\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\n    error: string | null\n    isInitialized: boolean\n}\n\nexport const setAppErrorAC = (error: string | null) => ({ type: 'APP/SET-ERROR', error } as const)\nexport const setAppStatusAC = (status:  RequestStatusType) => ({ type: 'APP/SET-STATUS', status } as const)\nexport const setAppInitializedAC = (isInitialized:  boolean) => ({ type: 'SET-IS-INITIALIZED', isInitialized } as const)\n\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\nexport type setAppInitializedType = ReturnType<typeof setAppInitializedAC>\n\ntype ActionsType =\n    | SetAppErrorActionType\n    | SetAppStatusActionType\n    | setAppInitializedType","import {Dispatch} from \"redux\"\nimport {authAPI} from \"../m3-dal/auth-api\";\nimport {setAppInitializedAC} from \"./appReducer\";\n\n// types\ntype InitialStateType = {\n    email: string\n    password: string\n    isLoggedIn: boolean\n    rememberMe: boolean\n    errorText: null | string\n    loadingStatus: RequestStatusType\n}\n\ntype ActionsType = ReturnType<typeof setIsLoggedInAC>\n    | ReturnType<typeof setErrorTextLoggedInAC>\n    | ReturnType<typeof changCheckboxLoggedInAC>\n    | ReturnType<typeof setAppStatusAC>\n    | ReturnType<typeof setAppInitializedAC>\n\n\nexport type RequestStatusType = 'idle' | 'loading...' | 'succeeded' | 'failed' | \"\";\n\n\nconst initialState = {\n    email: \"nya-admin@nya.nya\",\n    password: \"1qazxcvBG\",\n    isLoggedIn: false,\n    rememberMe: false,\n    errorText: null,\n    loadingStatus: \"idle\"\n} as InitialStateType\n\n\nexport const loginReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case \"login/SET-IS-LOGGED-IN\":\n            return {...state, isLoggedIn: action.value};\n        case \"login/SET-ERROR-TEXT-LOGGED-IN\":\n            return {...state, errorText: action.errorText};\n        case \"login/CHANG-CHECKBOX-LOGGED-IN\":\n            return {...state, rememberMe: action.rememberMe};\n        case \"APP/SET-STATUS\":\n            return {...state, loadingStatus: action.loadingStatus};\n        default:\n            return state\n    }\n}\n\n\n// actions\nexport const setIsLoggedInAC = (value: boolean) =>\n    ({type: \"login/SET-IS-LOGGED-IN\", value} as const);\nexport const setErrorTextLoggedInAC = (errorText: null | string) =>\n    ({type: \"login/SET-ERROR-TEXT-LOGGED-IN\", errorText} as const);\nexport const changCheckboxLoggedInAC = (rememberMe: boolean) =>\n    ({type: \"login/CHANG-CHECKBOX-LOGGED-IN\", rememberMe} as const);\nexport const setAppStatusAC = (loadingStatus: RequestStatusType) =>\n    ({type: 'APP/SET-STATUS', loadingStatus} as const);\n\n\n// thunks\nexport const loginTC = (email: string, password: string, rememberMe?: boolean) => async (dispatch: Dispatch<ActionsType>) => {\n\n    dispatch(setAppStatusAC(\"loading...\"));\n\n    try {\n        await authAPI.login(email, password, rememberMe);\n        dispatch(setIsLoggedInAC(true));\n        dispatch(setAppInitializedAC(true))\n    } catch (error) {\n        // debugger\n        // dispatch(setErrorTextLoggedInAC(error.response.data.error))\n    }\n    dispatch(setAppStatusAC(\"idle\"));\n};\n\nexport const logoutTC = (value: boolean) => async (dispatch: Dispatch<ActionsType>) => {\n\n    dispatch(setAppStatusAC(\"loading...\"));\n\n    try {\n        await authAPI.logout();\n        dispatch(setIsLoggedInAC(false));\n    } catch (error) {\n        dispatch(setErrorTextLoggedInAC(error.response.data.error));\n        dispatch(setAppInitializedAC(false))\n    }\n    dispatch(setAppStatusAC(\"idle\"));\n}\n\n\n\n\n","import React from 'react';\nimport './Button.css';\n\nexport interface ButtonProps {\n    /**\n     * Is this the principal call to action on the page?\n     */\n    primary?: boolean;\n    /**\n     * What background color to use\n     */\n    backgroundColor?: string;\n    /**\n     * How large should the button be?\n     */\n    size?: 'small' | 'medium' | 'large';\n    /**\n     * Button contents\n     */\n    label: string;\n    /**\n     * Optional click handler\n     */\n    onClick?: () => void;\n\n    onBlur?: () => void\n\n    disabled?: boolean\n\n    id?: string\n}\n\n/**\n * Primary UI component for user interaction\n */\nexport const Button: React.FC<ButtonProps> = ({\n                                                  id,\n                                                  onBlur,\n                                                  disabled,\n                                                  onClick,\n                                                  primary = false,\n                                                  size = 'medium',\n                                                  backgroundColor,\n                                                  label,\n                                                  ...props\n                                              }) => {\n    const mode = primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n\n    return (\n        <button\n            id={id}\n            disabled={disabled}\n            onBlur={onBlur}\n            type=\"button\"\n            onClick={onClick}\n            className={['storybook-button', `storybook-button--${size}`, mode].join(' ')}\n            style={{backgroundColor}}\n            {...props}\n        >\n            {label}\n        </button>\n    );\n};","import React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../../m2-bll/store\";\nimport {logoutTC, RequestStatusType} from \"../../../m2-bll/loginReducer\";\nimport {Redirect} from \"react-router-dom\";\nimport {Button} from \"../../common/Button/Button\";\n\n\n\ntype LoginActionType = {\n    email: string\n    password: string\n    isLoggedIn: boolean\n    rememberMe: boolean\n    errorText: null | string\n    loadingStatus: RequestStatusType\n}\n\nexport const Logout = React.memo(() => {\n        const dispatch = useDispatch();\n        const login = useSelector<AppRootStateType, LoginActionType>(state => state.login);\n\n        const isLoggedIn = login.isLoggedIn;\n\n        let setLogout = () => {\n            dispatch(logoutTC(false));\n        }\n\n        if (!isLoggedIn) {\n            return <Redirect to={\"/Login\"}/>\n        }\n        else\n        return <div>\n            <Button\n                label={'Logout'}\n                backgroundColor={'blue'}\n                onClick={setLogout}\n            />\n        </div>\n    }\n)\n\n","import React from 'react';\nimport {NavLink,  Switch} from 'react-router-dom';\nimport s from './Header.module.css';\nimport {Logout} from \"../components/logout/Logout\";\nimport {useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../m2-bll/store\";\n\nconst Header = () => {\n\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn);\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\n\n    return (\n        <Switch>\n        <nav className={s.nav}>\n            <div className={s.item}>\n                <Logout/>\n            </div>\n            {!isInitialized || !isLoggedIn\n            ?<div className={s.item}>\n                <NavLink to='/Login' activeClassName={s.active}>Login</NavLink>\n            </div>\n            : ''}\n            <div className={s.item}>\n                <NavLink to='/Registration' activeClassName={s.active}>Registration</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/forgot-password' activeClassName={s.active}>Forgot Password</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/Profile' activeClassName={s.active}>Profile</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/packs' activeClassName={s.active}>Packs</NavLink>\n            </div>\n        </nav>\n        </Switch>\n    )\n}\n\nexport default Header","import React from \"react\";\n\nconst  Error404 = () => {\n    return (\n        <div>\n            <div>404</div>\n            <div>Page not found!</div>\n            <div>—ฅ/ᐠ.̫ .ᐟ\\ฅ—</div>\n        </div>\n    );\n}\n\nexport default Error404;","import {Api} from \"../m3-dal/api\";\nimport {Dispatch} from \"redux\";\n\n\ntype InitialStateType = {\n    mail: string\n    password: string\n    checkPassword: string\n    errorText: null | string\n    addedUser: boolean\n    loadingStatus: LoadingStatusType\n}\nexport type LoadingStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\n\n\nconst initialState = {\n    errorText: null,\n    addedUser: false,\n    loadingStatus: 'idle'\n} as InitialStateType\n\nexport const registerReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'SET-ERROR-TEXT':\n            return {...state, errorText: action.errorText}\n        case 'SET-ADDED-USER':\n            return {...state, addedUser: true}\n        case 'SET-LOADING-STATUS':\n            return {...state, loadingStatus: action.loadingStatus}\n        default:\n            return state\n    }\n}\n\n// actions\nexport const setErrorTextAC = (errorText: null | string) => ({type: 'SET-ERROR-TEXT', errorText} as const)\nexport const setAddedUserAC = () => ({type: 'SET-ADDED-USER'} as const)\nexport const setLoadingStatusAC = (loadingStatus: LoadingStatusType) => ({type: 'SET-LOADING-STATUS', loadingStatus} as const)\n\n\n// thunks\n\nexport const SendRegisterTC = (mail: string, password: string) => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setLoadingStatusAC(\"loading\"))\n    Api.postDataRegister(mail, password)\n        .then((res) => {\n            if (res.addedUser !== undefined) {\n                dispatch(setAddedUserAC())\n            }\n            dispatch(setLoadingStatusAC('succeeded'))\n        })\n        .catch(error => {dispatch(setErrorTextAC(error.response.data.error))\n            dispatch(setLoadingStatusAC('failed'))\n            })\n}\n\n\n// types\nexport type setErrorTextACType = ReturnType<typeof setErrorTextAC>;\nexport type setAddedUserACType = ReturnType<typeof setAddedUserAC>;\nexport type setLoadingStatusACType = ReturnType<typeof setLoadingStatusAC>;\ntype ActionsType =\n    | setErrorTextACType\n    | setAddedUserACType\n    | setLoadingStatusACType\n\n// type ThunkDispatch = Dispatch<ActionsType>","import React, {ChangeEvent, useState} from \"react\";\nimport s from './Registration.module.css'\nimport {Button} from \"../../common/Button/Button\";\nimport {Redirect} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../../m2-bll/store\";\nimport {\n    LoadingStatusType,\n    SendRegisterTC,\n    setErrorTextAC,\n} from \"../../../m2-bll/registerReducer\";\n\n\ntype RegistrationType = {\n    mail: string\n    password: string\n    checkPassword: string\n    errorText: null | string\n    addedUser: boolean,\n    loadingStatus: LoadingStatusType\n}\n\n\nconst Registration = () => {\n\n    const register = useSelector<AppRootStateType, RegistrationType>(state => state.register)\n\n    const dispatch = useDispatch();\n\n    let errorText = register.errorText\n    let addedUser = register.addedUser\n    let loadingStatus = register.loadingStatus\n\n    let [mail, setMail] = useState(\"\")\n    let [password, setPassword] = useState(\"\")\n    let [checkPassword, setCheckPassword] = useState(\"\")\n\n\n\n\n        const SendRegister = () => {\n            if (password !== checkPassword) {\n                return dispatch(setErrorTextAC('password is not correct'))\n            } else\n                dispatch(SendRegisterTC(mail, password))\n        }\n\n    const onChangeMail = (e: ChangeEvent<HTMLInputElement>) => {\n        setMail(e.currentTarget.value)\n    }\n    const onChangePassword = (e: ChangeEvent<HTMLInputElement>) => {\n        setPassword(e.currentTarget.value)\n    }\n    const onChangeCheckPassword = (e: ChangeEvent<HTMLInputElement>) => {\n        setCheckPassword(e.currentTarget.value)\n           }\n    const hideErrorText = () => {\n        dispatch(setErrorTextAC(null))\n    }\n\n\n\n    if (addedUser) {\n        return <Redirect to='/login'/>\n    } else\n        return (\n            <div>\n                <p> Please fill in the blank fields and press sign up </p>\n                <form className={s.register}>\n                    {loadingStatus === 'loading' ? <div>Loading...</div>: ''}\n                    <div>Email</div>\n                    <input onChange={onChangeMail}/>\n                    <div >Password</div>\n                    <input onChange={onChangePassword}/>\n                    <div >Password</div>\n                    <input onChange={onChangeCheckPassword}/>\n                    <div className={s.errorText} >{errorText !== null\n                        ? <div className={s.errorText}>{errorText}</div>\n                        : ''}\n                    </div>\n\n                    <Button\n                        disabled={loadingStatus === 'loading'}\n                        onBlur={hideErrorText}\n                        label={'Sign Up'}\n                        onClick={SendRegister}\n                        backgroundColor={'blue'}/>\n                </form>\n            </div>\n\n        )\n\n}\n\nexport default Registration;","import axios from 'axios'\n\nconst settings = {\n    withCredentials: true,\n}\n\n\nconst instance = axios.create({\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\n    ...settings\n})\n\nexport const cardAPI = {\n    forgotPassword(email: string,) {\n        const message = `<div style=\"background-color: lime; padding: 15px\"> password recovery link: <a href='https://highhack.github.io/Page4/$token$'> link</a></div>`\n        const from = \"test-front-admin <ai73a@yandex.by>\"\n        return instance.post('auth/forgot', {email,from,message});\n    },\n    // authMe(){\n    //     let promise = instance.post('auth/me', {});\n    //     return promise;\n    // }\n}","import {Dispatch} from 'redux'\nimport { cardAPI } from '../m3-dal/forgot-api'\n\n\nconst initialState: InitialStateType = {\n    status: 'idle',\n    error: null,\n    isInitialized: true,\n    forgotPassword: false,\n}\n\n//Reducer\nexport const forgotReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'CARDS/FORGOT-PASSWOR':\n            return {...state, forgotPassword: action.forgotPassword}\n        case 'CARDS/SET-APP-STATUS':\n            return {...state, status: action.status}\n        case 'CARDS/SET-APP-ERROR':\n            return {...state, error: action.error}\n        default:\n            return state\n    }\n}\n\n// actions\nconst forgotPasswordAC = (forgotPassword: boolean) => ({\n    type: 'CARDS/FORGOT-PASSWOR',\n    forgotPassword\n} as const)\n\nconst setAppStatusAC = (status: RequestStatusType) => ({\n    type: 'CARDS/SET-APP-STATUS',\n    status\n} as const)\n\nconst setAppErrorAC = (error: string | null) => ({\n    type: 'CARDS/SET-APP-ERROR',\n    error\n} as const)\n\n\n// thunks\nexport const forgotPasswordTC = (email: string) => {\n    return (dispatch: ThunkDispatch) => {\n        dispatch(setAppStatusAC('loading'))\n        dispatch(forgotPasswordAC(true))\n        cardAPI.forgotPassword(email)\n            .then((res: any) => {\n                dispatch(setAppStatusAC('succeeded'))\n                dispatch(setAppErrorAC(null))\n            }).catch(e => {\n            const error = e.response?e.response.data.error:(e.message + ', more details in the console');\n            dispatch(setAppErrorAC(error))\n            dispatch(setAppStatusAC('failed'))\n        }).finally(()=>{\n                dispatch(forgotPasswordAC(false))\n            }\n        )\n    }\n}\n\n\n// export const authMeTC =()=>(dispatch: ThunkDispatch)=>{\n//     cardAPI.authMe().then((res: any) => {\n//     }).catch(e => {\n//         const error = e.response?e.response.data.error:(e.message + ', more details in the console');\n//     }).finally(()=>{\n//         }\n//     )\n// }\n\n\n\n// types\ntype ActionsType =\n    | ReturnType<typeof forgotPasswordAC>\n    | ReturnType<typeof setAppStatusAC>\n    | ReturnType<typeof setAppErrorAC>\n\ntype ThunkDispatch = Dispatch<ActionsType>\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\n\ntype InitialStateType = {\n    // is there any interaction with the server now\n    status: RequestStatusType\n    // if a global error happen, we will write the error text here\n    error: string | null\n    // true when the application was initialized (checked the user, got the settings, etc.)\n    isInitialized: boolean\n    //  true if user forgot password\n    forgotPassword: boolean\n}\n\n","import React, { useCallback, useState} from 'react';\nimport {Button} from '../../common/Button/Button';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {AppRootStateType} from '../../../m2-bll/store';\nimport {forgotPasswordTC, RequestStatusType} from '../../../m2-bll/forgotReducer';\n\n\nconst ForgotPassword = React.memo(function ForgotPassword() {\n    const [value, setValue]= useState<string>(\"\")\n    const handleChange =(e:React.FormEvent<HTMLInputElement>)=> {\n        if (e.currentTarget.value && e.currentTarget.value.trim() !== \"\"){\n            setValue(e.currentTarget.value);\n        }\n    }\n    const statusApp =useSelector((store: AppRootStateType):RequestStatusType =>store.forgotPassword.status );\n    const serverError =useSelector((store: AppRootStateType):string|null =>store.forgotPassword.error);\n    const dispatch = useDispatch();\n    const onClick = useCallback(() => {\n        dispatch(forgotPasswordTC(value))\n    setValue('')}, [value, dispatch])\n\n    // useEffect(() => {\n    //     dispatch(authMeTC())\n    // },[dispatch]);\n\n\n    return (\n        <div style={{marginTop:\"25px\"}}>\n            Enter your email\n            {(statusApp===\"loading\")?<div style={{color:\"blue\"}}>Loading...</div>:null}\n            <input type=\"email\" value={value} onChange={handleChange} style={{display:\"block\",    marginLeft: \"auto\", marginRight:'auto', marginBottom:\"5px\", marginTop:\"5px\"}}/>\n            {(statusApp===\"succeeded\")?<div style={{color:\"green\"}}> Please check your inbox</div>:null}\n            {serverError && <div style={{color:\"red\"}}>{serverError}</div>}\n            <Button size={'small'} label={\"Forgot Password\"} backgroundColor={\"rgb(100 214 124)\"} onClick={onClick}/>\n        </div>\n    );\n})\n\n\nexport default ForgotPassword;","import React from \"react\";\n\nconst  Profile = () => {\n    return (\n        <div>\n            Profile\n        </div>\n    );\n}\n\nexport default Profile;","import React, {ChangeEvent, useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../../m2-bll/store\";\nimport {\n    changCheckboxLoggedInAC,\n    loginTC,\n    RequestStatusType,\n    setErrorTextLoggedInAC\n} from \"../../../m2-bll/loginReducer\";\nimport s from \"../registration/Registration.module.css\";\nimport {Redirect} from \"react-router-dom\";\nimport {Button} from \"../../common/Button/Button\";\n\n\nexport type LoginActionType = {\n    email: string\n    password: string\n    isLoggedIn: boolean\n    rememberMe: boolean\n    errorText: null | string\n    loadingStatus: RequestStatusType\n}\n\nexport const Login = () => {\n\n    const dispatch = useDispatch();\n    const login = useSelector<AppRootStateType, LoginActionType>(state => state.login);\n\n    let isLoggedIn = login.isLoggedIn;\n    let errorText = login.errorText;\n    let rememberMe = login.rememberMe;\n    let loadingStatus = login.loadingStatus\n\n    const [pass, setPass] = useState(\"1qazxcvBG\")\n    const [mail, setMail] = useState(\"nya-admin@nya.nya\")\n\n    const setLogin = () => {\n            dispatch(loginTC(mail, pass, rememberMe));\n    };\n\n    const setErrorText = () => {\n        dispatch(setErrorTextLoggedInAC(\"\"));\n    };\n\n    const onChangePassword = (e: ChangeEvent<HTMLInputElement>) => {\n        setPass(e.currentTarget.value);\n    }\n    const onChangEmail = (e: ChangeEvent<HTMLInputElement>) => {\n        setMail(e.currentTarget.value);\n    }\n    const onChangCheckbox = (e: ChangeEvent<HTMLInputElement>) => {\n        dispatch(changCheckboxLoggedInAC(e.currentTarget.checked))\n    }\n\n    if (isLoggedIn) {\n        return <Redirect to={\"/profile\"}/>\n    }\n\n    return <div onClick={setErrorText}>\n        <p> Please fill in the blank fields and press LOGIN </p>\n        <p>or use common test account credentials:</p>\n        <p>Email: <b>nya-admin@nya.nya</b></p>\n        <p>Password: <b>1qazxcvBG</b></p>\n        <form className={s.register}>\n            {loadingStatus === 'loading...' ? <div>{loadingStatus}</div> : ''}\n            <div>\n                Email\n                <input\n                    type=\"email\"\n                    name=\"email\"\n                    value={mail}\n                    onChange={onChangEmail}\n                />\n            </div>\n            <div>\n                Password\n                <input\n                    type=\"password\"\n                    name=\"password\"\n                    value={pass}\n                    onChange={onChangePassword}\n                />\n            </div>\n            <input\n                type={\"checkbox\"}\n                name=\"rememberMe\"\n                onChange={onChangCheckbox}\n            />\n            <div className={s.errorText}>{errorText !== null\n                ? <div className={errorText}>{errorText}</div>\n                : ''}\n            </div>\n            <Button\n                label={'Login'}\n                onClick={setLogin}\n                backgroundColor={'blue'}\n                disabled={loadingStatus === \"loading...\"}\n            />\n        </form>\n    </div>\n}\n\n","import {Dispatch} from 'redux'\nimport {Api} from \"../m3-dal/api\";\n\ntype InitialStateType = {\n    cardPacks: any\n    newPackTitle: null | string\n    id: string\n    packId: string\n    cardPacksTotalCount: number\n    pageCount?: number\n    page?: number\n    portionSize: number\n\n}\nconst initialState: InitialStateType = {\n    cardPacks: [],\n    newPackTitle: null,\n    id: '',\n    packId: '',\n    cardPacksTotalCount: 140,\n    pageCount: 10,\n    page: 1,\n    portionSize: 5\n}\n\nexport const packReducer = (state: InitialStateType = initialState, action: ActionsType) => {\n    switch (action.type) {\n        case 'SET-PACKS':\n            return {...state, cardPacks: action.cardPacks}\n        case 'ADD-PACK':\n            return {...state, newPackTitle: action.newPackTitle}\n        case 'DELETE-PACK':\n            return state.cardPacks.filter((p: any) => p._id !== action.id)\n        case 'SET-PACK-ID':\n            let a =  {...state, packId: action.packId}\n            return a\n        case \"SET_CURRENT_PAGE\":\n            return {...state, page: action.page}\n        case \"SET_TOTAL_COUNT\":\n            return {...state, cardPacksTotalCount: action.cardPacksTotalCount}\n        default:\n            return state\n    }\n}\n\n// actions\nexport const setPacksAC = (cardPacks: Array<any>) => ({type: 'SET-PACKS', cardPacks} as const)\nexport const addPackAC = (newPackTitle: string) => ({type: 'ADD-PACK', newPackTitle} as const)\nexport const deletePackAC = (id: string) => ({type: 'DELETE-PACK', id} as const)\nexport const setPackIdAC = (packId: string) => ({type: 'SET-PACK-ID', packId} as const)\n\n//actions Paginator\nexport const setCurrentPage = (page: number) => ({type: \"SET_CURRENT_PAGE\", page} as const)\nexport const setCardPacksTotalCount = (cardPacksTotalCount: number) => ({\n    type: \"SET_TOTAL_COUNT\",\n    cardPacksTotalCount: cardPacksTotalCount\n} as const)\n\n\n// thunks\nexport const getPacksTC = (page: number) => {\n    return (dispatch: ThunkDispatch) => {\n        Api.getPacks( page)\n            .then((data: any) => {\n                dispatch(setPacksAC(data.cardPacks))\n                dispatch(setCurrentPage(data.page))\n            })\n    }\n}\nexport const addPackTC = (title: string, page: number) => {\n    return (dispatch: ThunkDispatch) => {\n        Api.postNewPack(title)\n            .then((data) => {\n                Api.getPacks(page)\n                    .then((data: any) => {\n                        dispatch(setPacksAC(data.cardPacks))\n                    })\n            })\n    }\n}\nexport const deletePackTC = (id: string, page: number) => {\n    return (dispatch: ThunkDispatch) => {\n        Api.deletePack(id)\n            .then((data) => {\n                Api.getPacks(page)\n                    .then((data: any) => {\n                        dispatch(setPacksAC(data.cardPacks))\n                    })\n            })\n    }\n}\n\nexport const updatePackTitleTC = (newPackName: string, packId: string, page: number) => {\n    return (dispatch: ThunkDispatch) => {\n        Api.updatePack(newPackName, packId)\n            .then((data) => {\n                Api.getPacks(page)\n                    .then((data: any) => {\n                        dispatch(setPacksAC(data.cardPacks))\n                    })\n            })\n    }\n}\n\n// types\nexport type setPacksACType = ReturnType<typeof setPacksAC>;\nexport type addPackACType = ReturnType<typeof addPackAC>;\nexport type deletePackACType = ReturnType<typeof deletePackAC>;\nexport type SetPackIdACType = ReturnType<typeof setPackIdAC>;\nexport type setCurrentPageType = ReturnType<typeof setCurrentPage>;\nexport type setCardPacksTotalCountType = ReturnType<typeof setCardPacksTotalCount>;\n\ntype ActionsType =\n    | setPacksACType\n    | addPackACType\n    | deletePackACType\n    | SetPackIdACType\n    | setCurrentPageType\n    | setCardPacksTotalCountType\n\ntype ThunkDispatch = Dispatch<ActionsType>","import React, {ChangeEvent, useState} from \"react\";\nimport {useDispatch} from \"react-redux\";\nimport {searchTC} from \"../../../m2-bll/searchReducer\";\nimport {Button} from \"../../common/Button/Button\";\nimport s from './searchPack.module.css'\n\n// type SearchPackType = {\n//     cardPacks: any\n//     newPackTitle: null | string\n//     id: string\n// }\n\nexport let SearchPack = () => {\n\n    const dispatch = useDispatch();\n    // const cardPacks = useSelector<AppRootStateType, SearchPackType>(state => state.packs.cardPacks);\n\n    const [filter, setFilter] = useState('')\n\n    let setSearch = () => {\n        dispatch(searchTC(filter));\n    }\n\n    let onChangeSearch = (e: ChangeEvent<HTMLInputElement>) => {\n        setFilter(e.currentTarget.value);\n    }\n\n    return (\n    <div className={s.searchPack}>\n        <div>\n            <input\n                type=\"text\"\n                name={\"search\"}\n                onChange={onChangeSearch}\n            />\n        </div>\n        <Button\n            label={'Search'}\n            onClick={setSearch}\n            backgroundColor={'blue'}\n        />\n    </div>\n    )}\n\n// function searchPackNameAC(cardPacks: any): any {\n//     throw new Error(\"Function not implemented.\");\n// }\n","import { Dispatch } from \"redux\";\nimport { searchAPI } from \"../m3-dal/auth-api\";\nimport { setAppStatusAC, setErrorTextLoggedInAC } from \"./loginReducer\";\nimport { setPacksAC } from \"./packReducer\";\n\n\ntype InitialStateType = {\n    packName: string\n    min: number\n    max: number\n    sortPacks: number\n    page: number\n    pageCount: number\n    user_id: string\n}\n\nconst initialState: InitialStateType = {\n    packName: \"\",\n    min: 1,\n    max: 10,\n    sortPacks: 0,\n    page: 1,\n    pageCount: 1,\n    user_id: \"5eb543f6bea3ad21480f1ee7\"\n}\n\n\nexport const searchReducer = (state: InitialStateType = initialState, action: ActionsType) => {\n    switch (action.type) {\n        case \"SEARCH-PACK-NAME\":\n            return {...state,\n\n                // packName: state.packName.filter((word: string) => {\n                //     return word == action.packName ? word : \"no results were found for your search\"\n                // })\n            };\n\n        default:\n            return state\n    }\n}\n\nconst searchPackNameAC = (packName: string) => ({type: \"SEARCH-PACK-NAME\", packName} as const);\n\nexport const searchTC = (packName: string) => async (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC(\"loading...\"));\n    try {\n       let a: any =  await searchAPI.search(packName);\n        dispatch(setPacksAC(a.data.cardPacks));\n    } catch (error) {\n        dispatch(setErrorTextLoggedInAC(error.response.data.error));\n\n    }\n    dispatch(setAppStatusAC(\"idle\"));\n}\n\n// types\ntype searchPackNameACType = ReturnType<typeof searchPackNameAC>\ntype ActionsType = searchPackNameACType","import {Dispatch} from 'redux'\nimport {Api, CardType} from \"../m3-dal/api\";\n\n\ntype InitialStateType = {\n    cards: Array<CardType>\n    packId: string\n    cardId: string\n\n}\nconst initialState: InitialStateType = {\n    cards: [],\n    packId: '',\n    cardId:''\n}\n\nexport const cardsReducer = (state: InitialStateType = initialState, action: ActionsType) => {\n    switch (action.type) {\n        case 'SET-CARDS':\n            return {...state, cards: action.cards, packId: action.packId}\n        case 'SET-CARD-ID':\n            let a =  {...state, cardId: action.cardId}\n            return a\n        // case 'ADD-CARD':\n        //     return {...state, newCardsTitle: action.newCardsTitle}\n        // case 'DELETE-CARD':\n        //     return state.cards.filter((p: any) => p._id !== action.id)\n        default:\n            return state\n    }\n}\n\n// actions\nexport const setCardsAC = (cards: Array<any>, packId: string) => ({type: 'SET-CARDS', cards, packId} as const)\nexport const deleteCardAC = (id: string) => ({type: 'DELETE-CARD', id} as const)\nexport const setCardIdAC = (cardId: string) => ({type: 'SET-CARD-ID', cardId} as const)\n\n\n// thunks\nexport const getCardsTC = (packId: string) => {\n    return (dispatch: ThunkDispatch) => {\n        Api.getCards(packId)\n            .then((data) => {\n               return dispatch(setCardsAC(data.cards,packId ))\n            })\n    }\n}\nexport const addCardTC = (question: string, answer: string, packId: string) => {\n    return (dispatch: ThunkDispatch) => {\n        Api.postNewCard(question, answer, packId)\n            .then((data) => {\n                Api.getCards(packId)\n                    .then((data) => {\n                        dispatch(setCardsAC(data.cards, packId))\n                    })\n            })\n    }\n}\nexport const deleteCardsTC = (id: string, packId: string) => {\n    return (dispatch: ThunkDispatch) => {\n        Api.deleteCard(id)\n            .then((data) => {\n                Api.getCards(packId)\n                    .then((data: any) => {\n                        dispatch(setCardsAC(data.cards, packId))\n                    })\n            })\n    }\n}\n\nexport const updateCardTitleTC = (quesrion: string,answer: string, cardId: string, packId: string) => {\n    return (dispatch: ThunkDispatch) => {\n        Api.updateCard(quesrion,answer, cardId)\n            .then((data) => {\n                Api.getCards(packId)\n                    .then((data: any) => {\n                        dispatch(setCardsAC(data.cards, packId))\n                    })\n            })\n    }\n}\n\n\n// types\nexport type setCardsACType = ReturnType<typeof setCardsAC>;\nexport type deleteCardACType = ReturnType<typeof deleteCardAC>;\nexport type setCardIdACType = ReturnType<typeof setCardIdAC>;\ntype ActionsType =\n    | setCardsACType\n    | setCardIdACType\n    // | deleteCardACType\n\ntype ThunkDispatch = Dispatch<ActionsType>","import {Slider} from 'antd';\nimport React from 'react';\nimport 'antd/dist/antd.css';\nimport s from './searchPack.module.css'\n\n\n\nexport const SearchTable = () => {\n\n    return <div className={s.search_table}>\n        <Slider className={s.slider} range={{draggableTrack: true}} defaultValue={[20, 50]}/>\n    </div>\n}\n\n","import React, {useState} from \"react\";\nimport cn from \"classnames\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport { AppRootStateType } from \"../../../m2-bll/store\";\nimport s from \"./searchPack.module.css\"\nimport { getPacksTC } from \"../../../m2-bll/packReducer\";\n\n// type PaginatorType = {\n//     page: number\n//     totalItemsCount: number\n//     pageCount: number\n//     portionSize: number\n//     onPageChanged: () => void\n//     cardPacksTotalCount: number\n//    \n// }\n\n\n\nexport let Paginator = () => {\n\n    const portionSize = useSelector<AppRootStateType, number>(state => state.packs.portionSize);\n    // const pageCount = useSelector<AppRootStateType, number>(state => state.packs.pageCount);\n    const cardPacksTotalCount = useSelector<AppRootStateType, number>(state => state.packs.cardPacksTotalCount);\n    const currentPage = useSelector<AppRootStateType, number>(state => state.packs.page);\n\n    const dispatch = useDispatch()\n\n\n    let pagesCount = Math.ceil(cardPacksTotalCount / portionSize);\n    let pages = [];\n\n   const onPageChanged =  (currentPage: number) => {\n        dispatch(getPacksTC(currentPage))\n    }\n\n    for (let i = 1; i <= pagesCount; i++) {\n        pages.push(i)\n    }\n\n    let portionCount = Math.ceil(pagesCount / 10);\n    let [portionNumber, setPortionNumber] = useState<number>(1);\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\n    let rightPortionPageNumber = portionNumber * portionSize;\n\n    return (\n        <div className={s.paginator}>\n            {portionNumber > 1 &&\n            <button onClick={() => {\n                setPortionNumber(portionNumber - 1)\n            }}>PREV</button>\n            }\n            {\n                pages\n                    .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\n                    .map((p) => {\n                        return <span className={cn({[s.selectedPage]: currentPage === p}, s.pageNumber)}\n                                     key={p}\n                                     onClick={(e) => {\n                                         onPageChanged(p)\n                                     }}>{p}</span>\n                    })\n            }\n            {\n                portionCount > portionNumber &&\n                <button onClick={() => {\n                    setPortionNumber(portionNumber + 1)\n                }}>PREV</button>\n            }\n\n        </div>\n    )\n}\n\n","import React, {ChangeEvent, useEffect, useState} from \"react\";\nimport s from './Packs.module.css'\nimport {Button} from \"../../common/Button/Button\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {addPackTC, deletePackTC, getPacksTC, setPackIdAC, updatePackTitleTC} from \"../../../m2-bll/packReducer\";\nimport {AppRootStateType} from \"../../../m2-bll/store\";\nimport {SearchPack} from \"../searchPack/SearchPack\";\nimport {getCardsTC} from \"../../../m2-bll/cardsReducer\";\nimport {NavLink} from \"react-router-dom\";\nimport {CardPackType} from \"../../../m3-dal/api\";\nimport {SearchTable} from \"../searchPack/SearchTable\";\nimport {Paginator} from \"../searchPack/Paginator\";\n\n// type PropsType = {\n//     page: number\n//     pageCount: number\n// }\n\nconst Packs = React.memo(() => {\n    const cardPacks = useSelector<AppRootStateType, Array<CardPackType>>(state => state.packs.cardPacks)\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn);\n    let packId = useSelector<AppRootStateType, string>(state => state.packs.packId);\n\n    let [writtenTitlePack, setWrittenTitlePack] = useState('')\n    let [inputPackTitle, setInputPackTitle] = useState(false)\n    let [inputChangeTitle, setInputChangeTitle] = useState(false)\n    let [ChangeTitle, setChangeTitle] = useState('')\n\n    // const pageCount = useSelector<AppRootStateType, number>(state => state.packs.pageCount);\n    const currentPage = useSelector<AppRootStateType, number>(state => state.packs.page);\n    const dispatch = useDispatch()\n\n    const addPackTitle = () => {\n        setInputPackTitle(true)\n    }\n\n\n    const changeTitle = (id: string) => {\n        setInputChangeTitle(true)\n        let pack = cardPacks.find((p) => p._id === id)\n        if (pack !== undefined) {\n            setChangeTitle(pack.name)\n            dispatch(setPackIdAC(pack._id))\n        }\n    }\n\n\n    useEffect(() => {\n        if (isInitialized)\n            dispatch(getPacksTC(currentPage))\n    }, [dispatch, isInitialized, currentPage])\n\n\n    // const packs = useSelector<AppRootStateType, any>(state => state.packs)\n    // let cardPacks = packs.cardPacks\n    //     if (isInitialized)\n    //         dispatch(getPacksTC())\n    // }, [dispatch, isInitialized])\n\n\n    const onChangePackTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setWrittenTitlePack(e.currentTarget.value);\n    }\n    const doChangesInTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setChangeTitle(e.currentTarget.value);\n    }\n\n    const savePack = () => {\n        dispatch(addPackTC(writtenTitlePack, currentPage))\n        setWrittenTitlePack('')\n        setInputPackTitle(false)\n    }\n\n    const showCards = (packId: string) => {\n        dispatch(getCardsTC(packId))\n    }\n\n    const deletePack = (packId: string) => {\n        dispatch(deletePackTC(packId, currentPage))\n    }\n    const updateTitle = () => {\n        dispatch(updatePackTitleTC(ChangeTitle, packId, currentPage))\n        setInputChangeTitle(false)\n    }\n\n\n    if (!isLoggedIn)\n        return (\n            <div>\n                <div>\n                    You are not authorized\n                </div>\n                <NavLink to='/login'>Login</NavLink>\n            </div>\n        )\n    if (cardPacks === undefined) return <div>Not Found Packs</div>\n\n    return (\n        <div>\n            {(inputPackTitle) &&\n            <div>\n                <div className={s.backgroundForWindow}>{}</div>\n                <div className={s.inputWindow}>\n                    <input\n                        onChange={onChangePackTitle}\n                        placeholder={'Please enter new name'}\n                        value={writtenTitlePack}\n                        className={s.inputTitlePack}/>\n                    <Button onClick={savePack} backgroundColor={'blue'} size={\"large\"} label={'Save'}/>\n                </div>\n            </div>}\n            {(inputChangeTitle) &&\n                <div>\n                    <div className={s.backgroundForWindow}>{}</div>\n                    <div className={s.inputWindow}>\n                        <input\n                            onChange={doChangesInTitle}\n                            value={ChangeTitle}\n                            className={s.inputChangeTitlePack}/>\n                        <Button\n                            onClick={updateTitle}\n                            label={'Update'}\n                            backgroundColor={'blue'}\n                            size={\"large\"}/>\n                    </div>\n                </div>}\n            <SearchPack/>\n            <div>\n                <SearchTable/>\n            </div>\n            <table className={s.table}>\n                <thead>\n                <tr>\n                    <th>Name</th>\n                    <th>Cards count</th>\n                    <th>Created</th>\n                    <th>Lest update</th>\n                    <th><Button onClick={addPackTitle} label={'Add Pack'}/></th>\n                </tr>\n                </thead>\n                {cardPacks.map((p: any) => {\n                    return <tbody  className={s.packData}>\n                    <tr>\n                        <td>{p.name}</td>\n                        <td>{p.cardsCount}</td>\n                        <td>{p.created}</td>\n                        <td>{p.updated}</td>\n                        <td>\n                            <Button\n                                onClick={() => changeTitle(p._id)}\n                                label={'Update'}/>\n                        </td>\n                        <td>\n                            <Button\n                                onClick={() => deletePack(p._id)}\n                                label={'Delete'}/>\n                        </td>\n                        <td>\n                            <NavLink to='/cards' onClick={() => showCards(p._id)}>Cards</NavLink>\n                        </td>\n                    </tr>\n                    </tbody>\n                })\n                }\n            </table>\n            <Paginator/>\n        </div>\n    );\n})\n\n\nexport default Packs;","import React, {ChangeEvent, useState} from \"react\";\nimport s from './Cards.module.css'\nimport {Button} from \"../../common/Button/Button\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../../m2-bll/store\";\nimport {SearchPack} from \"../searchPack/SearchPack\";\nimport {CardType} from \"../../../m3-dal/api\";\nimport {addCardTC, deleteCardsTC, setCardIdAC, updateCardTitleTC} from \"../../../m2-bll/cardsReducer\";\nimport { Paginator } from \"../searchPack/Paginator\";\n\n\n\nconst Cards = React.memo(() => {\n\n    let [question, setQuestion] = useState('')\n    let [answer, setAnswer] = useState('')\n    let [cardTitle, setCardTitle] = useState(false)\n    let [inputChangeTitle, setInputChangeTitle] = useState(false)\n\n    const cards = useSelector<AppRootStateType, Array<CardType>>(state => state.cards.cards)\n    const packId = useSelector<AppRootStateType, string>(state => state.cards.packId)\n    let cardId = useSelector<AppRootStateType, string>(state => state.cards.cardId);\n    const dispatch = useDispatch()\n\n    const addCard = () => {\n        setCardTitle(true)\n    }\n\n    const changeTitle = (id: string) => {\n        setInputChangeTitle(true)\n        let card = cards.find((p) => p._id === id)\n        if (card !== undefined) {\n            setQuestion(card.question)\n            setAnswer(card.answer)\n            dispatch(setCardIdAC(card._id))\n        }\n    }\n    const onChangeQuestion = (e: ChangeEvent<HTMLInputElement>) => {\n        setQuestion(e.currentTarget.value);\n    }\n    const onChangeAnswer = (e: ChangeEvent<HTMLInputElement>) => {\n        setAnswer(e.currentTarget.value);\n    }\n\n    const saveCard = () => {\n        dispatch(addCardTC(question, answer, packId))\n        setCardTitle(false)\n        setQuestion('')\n        setAnswer('')\n    }\n    const deleteCard = (id: string, packId: string) => {\n        dispatch(deleteCardsTC(id, packId))\n    }\n\n    const updateTitle = () => {\n        dispatch(updateCardTitleTC(question,answer, cardId, packId))\n        setInputChangeTitle(false)\n    }\n\n\n        return (\n            <div>\n                {(cardTitle)\n                    ? <div>\n                        <div className={s.backgroundForWindow}>{}</div>\n                        <div className={s.inputWindow}>\n                        <input\n                            onChange={onChangeQuestion}\n                            placeholder={'Enter question'}\n                            value={question}\n                            className={s.inputQuestion}/>\n                        <input\n                            onChange={onChangeAnswer}\n                            placeholder={'Enter answer'}\n                            value={answer}\n                            className={s.inputAnswer}/>\n                        <Button\n                            backgroundColor={'blue'}\n                            onClick={saveCard}\n                            label={'Save'}/>\n                    </div>\n                    </div>\n                    : ''}\n                {(inputChangeTitle) &&\n                <div>\n                    <div className={s.backgroundForWindow}>{}</div>\n                    <div className={s.inputWindow}>\n                        <input\n                            onChange={onChangeQuestion}\n                            value={question}\n                            className={s.inputChangeTitlePack}/>\n                            <input onChange={onChangeAnswer}\n                            value={answer}\n                            className={s.inputChangeTitlePack}/>\n                        <Button\n                            onClick={updateTitle}\n                            label={'Update'}\n                            backgroundColor={'blue'}\n                            size={\"large\"}/>\n                    </div>\n                </div>}\n                <SearchPack/>\n                <table className={s.table}>\n                    <thead>\n                    <tr>\n                        <th>Question</th>\n                        <th>Answer</th>\n                        <th>Grade</th>\n                        <th>Shots</th>\n                        <th><Button\n                            onClick={addCard}\n                            label={'Add Card'}/>\n                        </th>\n                    </tr>\n                    </thead>\n                    {cards.length === 0\n                        ? <tbody><tr><td>Not Found Cards</td></tr></tbody>\n                        : cards.map(p => {\n                            return <tbody className={s.packData}>\n                            <tr>\n                                <td>{p.question}</td>\n                                <td>{p.answer}</td>\n                                <td>{p.grade}</td>\n                                <td>{p.shots}</td>\n                                <td>\n                                    <Button\n                                        onClick={() => changeTitle(p._id)}\n                                        label={'Update'}/></td>\n                                <td>\n                                    <Button\n                                        onClick={() => deleteCard(p._id, packId)}\n                                        label={'Delete'}/>\n                                </td>\n                            </tr>\n                            </tbody>\n                        })\n                    }\n                </table>\n                <Paginator />\n            </div>\n        );\n    }\n)\n\n\nexport default Cards;","import React from 'react';\nimport {Redirect, Route, Switch} from 'react-router-dom';\nimport Error404 from '../common/Error404';\nimport Registration from '../components/registration/Registration';\nimport ForgotPassword from '../components/forgotPassword/ForgotPassword';\nimport Profile from '../components/profile/Profile';\nimport {Login} from '../components/login/Login';\nimport Packs from '../components/packs/Packs';\nimport Cards from '../components/cards/Cards';\n\nconst  Routes = () => {\n\n    return (\n        <div>\n            <Switch>\n                <Route exact path={'/'} render={() => <div> Hello</div>} />\n                <Route exact path={'/registration'} render={() => <Registration />} />\n                <Route exact path={'/forgot-password'} render={() => <ForgotPassword />} />\n                <Route exact path={'/profile'} render={() => <Profile />} />\n                <Route exact path={'/login'} render={() => <Login />} />\n                <Route exact path={'/packs'} render={() => <Packs />} />\n                <Route exact path={'/cards/'} render={() => <Cards/>} />\n                <Route path={ '/404' } render={ () => <Error404 /> }/>\n                <Redirect path={ '*' } to={ '/404' }/>\n            </Switch>\n        </div>\n    );\n}\n\nexport default Routes;","import React, {useEffect} from 'react';\nimport './App.css';\nimport Header from \"./header/Header\";\nimport Routes from \"./routes/Routes\";\nimport {initializeAppTC} from \"../m2-bll/appReducer\";\nimport {useDispatch} from \"react-redux\";\n\n\n\n\nconst App = () => {\n\n    let dispatch = useDispatch()\n    useEffect(() => {\n        dispatch(initializeAppTC())\n    }, [dispatch])\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Routes />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport {packReducer} from \"./packReducer\";\nimport {registerReducer} from \"./registerReducer\";\nimport {loginReducer} from \"./loginReducer\";\nimport { forgotReducer } from './forgotReducer';\nimport {cardsReducer} from \"./cardsReducer\";\nimport {appReducer} from \"./appReducer\";\n\n\nconst rootReducer = combineReducers({\n    packs: packReducer,\n    register: registerReducer,\n    login: loginReducer,\n    forgotPassword: forgotReducer,\n    cards: cardsReducer,\n    app: appReducer\n})\n// непосредственно создаём store\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './n1-main/m1-ui/App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./n1-main/m2-bll/store\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <BrowserRouter>\n                <App/>\n            </BrowserRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Header_nav__22THU\",\"item\":\"Header_item__ssK_c\",\"active\":\"Header_active__1MFs-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Cards_table__1Dkqf\",\"inputTitlePack\":\"Cards_inputTitlePack__31HLH\",\"backgroundForWindow\":\"Cards_backgroundForWindow__2UUxu\",\"inputWindow\":\"Cards_inputWindow__-d3eJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchPack\":\"searchPack_searchPack__3wQsW\",\"search_table\":\"searchPack_search_table__1APpv\",\"slider\":\"searchPack_slider__YpQLA\",\"paginator\":\"searchPack_paginator__2RkJL\",\"pageNumber\":\"searchPack_pageNumber__7LSgb\",\"selectedPage\":\"searchPack_selectedPage__3xe9A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Packs_table__2fqTh\",\"inputTitlePack\":\"Packs_inputTitlePack__3sKvs\",\"backgroundForWindow\":\"Packs_backgroundForWindow__1n3gW\",\"inputWindow\":\"Packs_inputWindow__C-PIR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"register\":\"Registration_register__1kewo\",\"errorText\":\"Registration_errorText__2agbz\"};"],"sourceRoot":""}