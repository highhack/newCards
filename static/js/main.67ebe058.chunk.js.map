{"version":3,"sources":["n1-main/m1-ui/components/registration/Registration.module.css","n1-main/m1-ui/components/cards/Cards.module.css","n1-main/m1-ui/components/packs/Packs.module.css","n1-main/m1-ui/components/searchPack/searchPack.module.css","n1-main/m1-ui/header/Header.tsx","n1-main/m1-ui/common/Error404.tsx","n1-main/m1-ui/common/Button/Button.tsx","n1-main/m3-dal/api.ts","n1-main/m2-bll/registerReducer.ts","n1-main/m1-ui/components/registration/Registration.tsx","n1-main/m3-dal/forgot-api.ts","n1-main/m2-bll/forgotReducer.ts","n1-main/m1-ui/components/forgotPassword/ForgotPassword.tsx","n1-main/m1-ui/components/profile/Profile.tsx","n1-main/m3-dal/auth-api.ts","n1-main/m2-bll/loginReducer.tsx","n1-main/m1-ui/components/login/Login.tsx","n1-main/m2-bll/packReducer.ts","n1-main/m1-ui/components/searchPack/SearchPack.tsx","n1-main/m2-bll/searchReducer.tsx","n1-main/m2-bll/cardsReducer.ts","n1-main/m1-ui/components/packs/Packs.tsx","n1-main/m1-ui/components/cards/Cards.tsx","n1-main/m1-ui/routes/Routes.tsx","n1-main/m1-ui/App.tsx","reportWebVitals.ts","n1-main/m2-bll/store.ts","index.tsx","n1-main/m1-ui/header/Header.module.css"],"names":["module","exports","Header","className","s","nav","item","to","activeClassName","active","Error404","Button","id","onBlur","disabled","onClick","primary","size","backgroundColor","label","props","mode","type","join","style","instance","axios","create","baseURL","withCredentials","Api","email","password","post","then","response","data","get","title","cardsPack","name","delete","packId","question","answer","addCard","initialState","errorText","addedUser","loadingStatus","setErrorTextAC","setLoadingStatusAC","Registration","register","useSelector","state","dispatch","useDispatch","useState","mail","setMail","setPassword","checkPassword","setCheckPassword","onChange","e","currentTarget","value","res","undefined","catch","error","SendRegisterTC","cardAPI","from","message","status","isInitialized","forgotPassword","forgotPasswordAC","setAppStatusAC","setAppErrorAC","ForgotPassword","React","memo","setValue","statusApp","store","serverError","useCallback","finally","useEffect","marginTop","color","trim","display","marginLeft","marginRight","marginBottom","Profile","authAPI","rememberMe","searchAPI","packName","isLoggedIn","setIsLoggedInAC","setErrorTextLoggedInAC","Login","login","pass","setPass","changCheckboxLoggedInAC","checked","a","loginTC","cardPacks","newPackTitle","setPacksAC","SearchPack","filter","setFilter","searchPack","cards","newCardsTitle","Packs","writtenTitlePack","setWrittenTitlePack","packTitle","setPackTitle","thunk","packs","showCards","getCardsTC","deletePack","placeholder","inputTitlePack","table","map","p","packData","cardsCount","created","updated","_id","Cards","setQuestion","setAnswer","cardTitle","setCardTitle","inputQuestion","inputAnswer","addCardTC","grade","shots","cardsPack_id","Routes","exact","path","render","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.67ebe058.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"register\":\"Registration_register__1kewo\",\"errorText\":\"Registration_errorText__2agbz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Cards_table__1Dkqf\",\"inputTitlePack\":\"Cards_inputTitlePack__31HLH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Packs_table__2fqTh\",\"inputTitlePack\":\"Packs_inputTitlePack__3sKvs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchPack\":\"searchPack_searchPack__3wQsW\"};","import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport s from './Header.module.css';\n\nconst Header = () => {\n    return (\n        <nav className={s.nav}>\n            <div className={s.item}>\n                {<NavLink to='/Login' activeClassName={s.active}>Login</NavLink>}\n            </div>\n            <div className={s.item}>\n                <NavLink to='/Registration' activeClassName={s.active}>Registration</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/forgot-password' activeClassName={s.active}>Forgot Password</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/Profile' activeClassName={s.active}>Profile</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/packs' activeClassName={s.active}>Packs</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/cards' activeClassName={s.active}>Cards</NavLink>\n            </div>\n        </nav>\n    )\n}\n\nexport default Header","import React from \"react\";\n\nconst  Error404 = () => {\n    return (\n        <div>\n            <div>404</div>\n            <div>Page not found!</div>\n            <div>—ฅ/ᐠ.̫ .ᐟ\\ฅ—</div>\n        </div>\n    );\n}\n\nexport default Error404;","import React from 'react';\nimport './Button.css';\n\nexport interface ButtonProps {\n    /**\n     * Is this the principal call to action on the page?\n     */\n    primary?: boolean;\n    /**\n     * What background color to use\n     */\n    backgroundColor?: string;\n    /**\n     * How large should the button be?\n     */\n    size?: 'small' | 'medium' | 'large';\n    /**\n     * Button contents\n     */\n    label: string;\n    /**\n     * Optional click handler\n     */\n    onClick?: () => void;\n\n    onBlur?: () => void\n\n    disabled?: boolean\n\n    id?: string\n}\n\n/**\n * Primary UI component for user interaction\n */\nexport const Button: React.FC<ButtonProps> = ({\n                                                  id,\n                                                  onBlur,\n                                                  disabled,\n                                                  onClick,\n                                                  primary = false,\n                                                  size = 'medium',\n                                                  backgroundColor,\n                                                  label,\n                                                  ...props\n                                              }) => {\n    const mode = primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n\n    return (\n        <button\n            id={id}\n            disabled={disabled}\n            onBlur={onBlur}\n            type=\"button\"\n            onClick={onClick}\n            className={['storybook-button', `storybook-button--${size}`, mode].join(' ')}\n            style={{backgroundColor}}\n            {...props}\n        >\n            {label}\n        </button>\n    );\n};","import axios from \"axios\";\n\n\nconst instance = axios.create({\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\n    withCredentials: true,\n})\nexport const  Api = {\n    postDataRegister(email: string, password: string)  {\n        return instance.post('auth/register', {email, password})\n            .then(response =>   response.data)\n    },\n    getPacks() {\n        return instance.get<GetCardPackResponseType>(`cards/pack?pageCount=10`)\n            .then(response =>   response.data)\n    },\n    postNewPack(title: string) {\n        return instance.post<PostOrDeleteResponseType>(`cards/pack`, {cardsPack: {name: title}})\n            .then(response =>   response.data)\n    },\n    deletePack(id: string) {\n        let promise =  instance.delete<PostOrDeleteResponseType>(`cards/pack?id=${id}`)\n        return promise\n            .then(response =>   response.data)\n    },\n        getCards(packId: string) {\n            let promise =  instance.get(`cards/card?&cardsPack_id=${packId}&pageCount=10`);\n            return promise\n                .then(response => response.data)\n    },\n    postNewCard(question: string, answer: string) {\n        return instance.post(`cards/card`, {addCard: {question: question, answer: answer}})\n            .then(response =>   response.data)\n    },\n    me() {\n        const promise = instance.get('auth/me');\n        return promise;\n    },\n}\n\ntype GetCardPackResponseType = {\n    [key: string] : Array<CardPackType>\n}\n\ntype CardPackType = {\n    \"_id\": string\n    \"user_id\": string\n    \"user_name\": string\n    \"private\": boolean\n    \"name\": string\n    \"path\": string\n    \"grade\": number\n    \"shots\": number\n    \"cardsCount\": number\n    \"type\": string\n    \"rating\": number\n    \"created\": string\n    \"updated\": string\n    \"more_id\": string\n    \"__v\": number\n}\n\ntype PostOrDeleteResponseType  = {\n    cardPacks: Array<CardPackType>\n    cardPacksTotalCount: number\n    maxCardsCount: number\n    minCardsCount: number\n    page: number\n    pageCount: number\n    token: string\n    tokenDeathTime: number\n}\n\n\n","import {Api} from \"../m3-dal/api\";\nimport {Dispatch} from \"redux\";\n\n\ntype InitialStateType = {\n    mail: string\n    password: string\n    checkPassword: string\n    errorText: null | string\n    addedUser: boolean\n    loadingStatus: LoadingStatusType\n}\nexport type LoadingStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\n\n\nconst initialState = {\n    errorText: null,\n    addedUser: false,\n    loadingStatus: 'idle'\n} as InitialStateType\n\nexport const registerReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'SET-ERROR-TEXT':\n            return {...state, errorText: action.errorText}\n        case 'SET-ADDED-USER':\n            return {...state, addedUser: true}\n        case 'SET-LOADING-STATUS':\n            return {...state, loadingStatus: action.loadingStatus}\n        default:\n            return state\n    }\n}\n\n// actions\nexport const setErrorTextAC = (errorText: null | string) => ({type: 'SET-ERROR-TEXT', errorText} as const)\nexport const setAddedUserAC = () => ({type: 'SET-ADDED-USER'} as const)\nexport const setLoadingStatusAC = (loadingStatus: LoadingStatusType) => ({type: 'SET-LOADING-STATUS', loadingStatus} as const)\n\n\n// thunks\n\nexport const SendRegisterTC = (mail: string, password: string) => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setLoadingStatusAC(\"loading\"))\n    Api.postDataRegister(mail, password)\n        .then((res) => {\n            if (res.addedUser !== undefined) {\n                dispatch(setAddedUserAC())\n            }\n            dispatch(setLoadingStatusAC('succeeded'))\n        })\n        .catch(error => {dispatch(setErrorTextAC(error.response.data.error))\n            dispatch(setLoadingStatusAC('failed'))\n            })\n}\n\n\n// types\nexport type setErrorTextACType = ReturnType<typeof setErrorTextAC>;\nexport type setAddedUserACType = ReturnType<typeof setAddedUserAC>;\nexport type setLoadingStatusACType = ReturnType<typeof setLoadingStatusAC>;\ntype ActionsType =\n    | setErrorTextACType\n    | setAddedUserACType\n    | setLoadingStatusACType\n\n// type ThunkDispatch = Dispatch<ActionsType>","import React, {ChangeEvent, useState} from \"react\";\nimport s from './Registration.module.css'\nimport {Button} from \"../../common/Button/Button\";\nimport {Redirect} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../../m2-bll/store\";\nimport {\n    LoadingStatusType,\n    SendRegisterTC,\n    setErrorTextAC,\n} from \"../../../m2-bll/registerReducer\";\n\n\ntype RegistrationType = {\n    mail: string\n    password: string\n    checkPassword: string\n    errorText: null | string\n    addedUser: boolean,\n    loadingStatus: LoadingStatusType\n}\n\n\nconst Registration = () => {\n\n    const register = useSelector<AppRootStateType, RegistrationType>(state => state.register)\n\n    const dispatch = useDispatch();\n\n    let errorText = register.errorText\n    let addedUser = register.addedUser\n    let loadingStatus = register.loadingStatus\n\n    let [mail, setMail] = useState(\"\")\n    let [password, setPassword] = useState(\"\")\n    let [checkPassword, setCheckPassword] = useState(\"\")\n\n\n\n\n        const SendRegister = () => {\n            if (password !== checkPassword) {\n                return dispatch(setErrorTextAC('password is not correct'))\n            } else\n                dispatch(SendRegisterTC(mail, password))\n        }\n\n    const onChangeMail = (e: ChangeEvent<HTMLInputElement>) => {\n        setMail(e.currentTarget.value)\n    }\n    const onChangePassword = (e: ChangeEvent<HTMLInputElement>) => {\n        setPassword(e.currentTarget.value)\n    }\n    const onChangeCheckPassword = (e: ChangeEvent<HTMLInputElement>) => {\n        setCheckPassword(e.currentTarget.value)\n           }\n    const hideErrorText = () => {\n        dispatch(setErrorTextAC(null))\n    }\n\n\n\n    if (addedUser) {\n        return <Redirect to='/login'/>\n    } else\n        return (\n            <div>\n                <p> Please fill in the blank fields and press sign up </p>\n                <form className={s.register}>\n                    {loadingStatus === 'loading' ? <div>Loading...</div>: ''}\n                    <div>Email</div>\n                    <input onChange={onChangeMail}/>\n                    <div >Password</div>\n                    <input onChange={onChangePassword}/>\n                    <div >Password</div>\n                    <input onChange={onChangeCheckPassword}/>\n                    <div className={s.errorText} >{errorText !== null\n                        ? <div className={s.errorText}>{errorText}</div>\n                        : ''}\n                    </div>\n\n                    <Button\n                        disabled={loadingStatus === 'loading'}\n                        onBlur={hideErrorText}\n                        label={'Sign Up'}\n                        onClick={SendRegister}\n                        backgroundColor={'blue'}/>\n                </form>\n            </div>\n\n        )\n\n}\n\nexport default Registration;","import axios from 'axios'\n\nconst settings = {\n    withCredentials: true,\n}\n\n\nconst instance = axios.create({\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\n    ...settings\n})\n\nexport const cardAPI = {\n    forgotPassword(email: string,) {\n        const message = `<div style=\"background-color: lime; padding: 15px\"> password recovery link: <a href='https://highhack.github.io/Page4/$token$'> link</a></div>`\n        const from = \"test-front-admin <ai73a@yandex.by>\"\n        return instance.post('auth/forgot', {email,from,message});\n    },\n    authMe(){\n        let promise = instance.post('auth/me', {});\n        return promise;\n    }\n}","import {Dispatch} from 'redux'\nimport { cardAPI } from '../m3-dal/forgot-api'\n\n\nconst initialState: InitialStateType = {\n    status: 'idle',\n    error: null,\n    isInitialized: true,\n    forgotPassword: false,\n}\n\n//Reducer\nexport const forgotReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'CARDS/FORGOT-PASSWOR':\n            return {...state, forgotPassword: action.forgotPassword}\n        case 'CARDS/SET-APP-STATUS':\n            return {...state, status: action.status}\n        case 'CARDS/SET-APP-ERROR':\n            return {...state, error: action.error}\n        default:\n            return state\n    }\n}\n\n// actions\nconst forgotPasswordAC = (forgotPassword: boolean) => ({\n    type: 'CARDS/FORGOT-PASSWOR',\n    forgotPassword\n} as const)\n\nconst setAppStatusAC = (status: RequestStatusType) => ({\n    type: 'CARDS/SET-APP-STATUS',\n    status\n} as const)\n\nconst setAppErrorAC = (error: string | null) => ({\n    type: 'CARDS/SET-APP-ERROR',\n    error\n} as const)\n\n\n// thunks\nexport const forgotPasswordTC = (email: string) => {\n    return (dispatch: ThunkDispatch) => {\n        dispatch(setAppStatusAC('loading'))\n        dispatch(forgotPasswordAC(true))\n        cardAPI.forgotPassword(email)\n            .then((res: any) => {\n                dispatch(setAppStatusAC('succeeded'))\n                dispatch(setAppErrorAC(null))\n            }).catch(e => {\n            const error = e.response?e.response.data.error:(e.message + ', more details in the console');\n            dispatch(setAppErrorAC(error))\n            dispatch(setAppStatusAC('failed'))\n        }).finally(()=>{\n                dispatch(forgotPasswordAC(false))\n            }\n        )\n    }\n}\n\n\nexport const authMeTC =()=>(dispatch: ThunkDispatch)=>{\n    cardAPI.authMe().then((res: any) => {\n    }).catch(e => {\n        const error = e.response?e.response.data.error:(e.message + ', more details in the console');\n    }).finally(()=>{\n        }\n    )\n}\n\n\n\n// types\ntype ActionsType =\n    | ReturnType<typeof forgotPasswordAC>\n    | ReturnType<typeof setAppStatusAC>\n    | ReturnType<typeof setAppErrorAC>\n\ntype ThunkDispatch = Dispatch<ActionsType>\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\n\ntype InitialStateType = {\n    // is there any interaction with the server now\n    status: RequestStatusType\n    // if a global error happen, we will write the error text here\n    error: string | null\n    // true when the application was initialized (checked the user, got the settings, etc.)\n    isInitialized: boolean\n    //  true if user forgot password\n    forgotPassword: boolean\n}\n\n","import React, { useCallback, useState, useEffect} from 'react';\nimport {Button} from '../../common/Button/Button';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {AppRootStateType} from '../../../m2-bll/store';\nimport {forgotPasswordTC, RequestStatusType, authMeTC} from '../../../m2-bll/forgotReducer';\n\n\nconst ForgotPassword = React.memo(function ForgotPassword() {\n    const [value, setValue]= useState<string>(\"\")\n    const handleChange =(e:React.FormEvent<HTMLInputElement>)=> {\n        if (e.currentTarget.value && e.currentTarget.value.trim() !== \"\"){\n            setValue(e.currentTarget.value);\n        }\n    }\n    const statusApp =useSelector((store: AppRootStateType):RequestStatusType =>store.forgotPassword.status );\n    const serverError =useSelector((store: AppRootStateType):string|null =>store.forgotPassword.error);\n    const dispatch = useDispatch();\n    const onClick = useCallback(() => {\n        dispatch(forgotPasswordTC(value))\n    setValue('')}, [value, dispatch])\n\n    useEffect(() => {\n        dispatch(authMeTC())\n    },[dispatch]);\n\n\n    return (\n        <div style={{marginTop:\"25px\"}}>\n            Enter your email\n            {(statusApp===\"loading\")?<div style={{color:\"blue\"}}>Loading...</div>:null}\n            <input type=\"email\" value={value} onChange={handleChange} style={{display:\"block\",    marginLeft: \"auto\", marginRight:'auto', marginBottom:\"5px\", marginTop:\"5px\"}}/>\n            {(statusApp===\"succeeded\")?<div style={{color:\"green\"}}> Please check your inbox</div>:null}\n            {serverError && <div style={{color:\"red\"}}>{serverError}</div>}\n            <Button size={'small'} label={\"Forgot Password\"} backgroundColor={\"rgb(100 214 124)\"} onClick={onClick}/>\n        </div>\n    );\n})\n\n\nexport default ForgotPassword;","import React from \"react\";\n\nconst  Profile = () => {\n    return (\n        <div>\n            Profile\n        </div>\n    );\n}\n\nexport default Profile;","import axios from \"axios\"\n\nconst instance = axios.create({\n    // baseURL: \"http://localhost:7542/2.0/\",\n    baseURL: \"https://neko-back.herokuapp.com/2.0/\",\n    withCredentials: true\n})\n\n// api\nexport const authAPI = {\n    login(email: string, password: string, rememberMe: boolean = false) {\n        return instance.post<LoginParamsType>(`auth/login`, {email, password, rememberMe})\n    },\n    logout() {\n        return instance.delete(`auth/me`, {});\n    }\n}\n\n\nexport const searchAPI = {\n    search(packName: string) {\n        return instance.get(`cards/pack?packName=${packName}&pageCount=10`);\n    }\n}\n\n\n\n// types\nexport type LoginParamsType = {\n    email: string\n    password: string\n    rememberMe?: boolean\n}\nexport type ResponseType = {\n    _id: string;\n    email: string;\n    name: string;\n    avatar?: string;\n    publicCardPacksCount: number; // количество колод\n    created: Date;\n    updated: Date;\n    isAdmin: boolean;\n    verified: boolean; // подтвердил ли почту\n    rememberMe: boolean;\n    error?: string;\n}\n\n\n","import {Dispatch} from \"redux\"\nimport {authAPI} from \"../m3-dal/auth-api\";\n\n// types\ntype InitialStateType = {\n    email: string\n    password: string\n    isLoggedIn: boolean\n    rememberMe: boolean\n    errorText: null | string\n    loadingStatus: RequestStatusType\n}\n\ntype ActionsType = ReturnType<typeof setIsLoggedInAC>\n    | ReturnType<typeof setErrorTextLoggedInAC>\n    | ReturnType<typeof changCheckboxLoggedInAC>\n    | ReturnType<typeof setAppStatusAC>\n\nexport type RequestStatusType = 'idle' | 'loading...' | 'succeeded' | 'failed' | \"\";\n\n\nconst initialState = {\n    email: \"nya-admin@nya.nya\",\n    password: \"1qazxcvBG\",\n    isLoggedIn: false,\n    rememberMe: false,\n    errorText: null,\n    loadingStatus: \"idle\"\n} as InitialStateType\n\n\nexport const loginReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case \"login/SET-IS-LOGGED-IN\":\n            return {...state, isLoggedIn: action.value};\n        case \"login/SET-ERROR-TEXT-LOGGED-IN\":\n            return {...state, errorText: action.errorText};\n        case \"login/CHANG-CHECKBOX-LOGGED-IN\":\n            return {...state, rememberMe: action.rememberMe};\n        case \"APP/SET-STATUS\":\n            return {...state, loadingStatus: action.loadingStatus};\n        default:\n            return state\n    }\n}\n\n\n// actions\nexport const setIsLoggedInAC = (value: boolean) =>\n    ({type: \"login/SET-IS-LOGGED-IN\", value} as const);\nexport const setErrorTextLoggedInAC = (errorText: null | string) =>\n    ({type: \"login/SET-ERROR-TEXT-LOGGED-IN\", errorText} as const);\nexport const changCheckboxLoggedInAC = (rememberMe: boolean) =>\n    ({type: \"login/CHANG-CHECKBOX-LOGGED-IN\", rememberMe} as const);\nexport const setAppStatusAC = (loadingStatus: RequestStatusType) =>\n    ({type: 'APP/SET-STATUS', loadingStatus} as const);\n\n\n// thunks\nexport const loginTC = (email: string, password: string, rememberMe?: boolean) => async (dispatch: Dispatch<ActionsType>) => {\n\n    dispatch(setAppStatusAC(\"loading...\"));\n\n    try {\n        await authAPI.login(email, password, rememberMe);\n        dispatch(setIsLoggedInAC(true));\n    } catch (error) {\n        dispatch(setErrorTextLoggedInAC(error.response.data.error))\n    }\n    dispatch(setAppStatusAC(\"idle\"));\n};\n\nexport const logoutTC = (value: boolean) => async (dispatch: Dispatch<ActionsType>) => {\n\n    dispatch(setAppStatusAC(\"loading...\"));\n\n    try {\n        await authAPI.logout();\n        dispatch(setIsLoggedInAC(false));\n    } catch (error) {\n        dispatch(setErrorTextLoggedInAC(error.response.data.error));\n    }\n    dispatch(setAppStatusAC(\"idle\"));\n}\n\n\n\n\n","import React, {ChangeEvent, useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../../m2-bll/store\";\nimport {\n    changCheckboxLoggedInAC,\n    loginTC,\n    RequestStatusType,\n    setErrorTextLoggedInAC\n} from \"../../../m2-bll/loginReducer\";\nimport s from \"../registration/Registration.module.css\";\nimport {Redirect} from \"react-router-dom\";\nimport {Button} from \"../../common/Button/Button\";\n\n\ntype LoginActionType = {\n    email: string\n    password: string\n    isLoggedIn: boolean\n    rememberMe: boolean\n    errorText: null | string\n    loadingStatus: RequestStatusType\n}\n\nexport const Login = () => {\n\n    const dispatch = useDispatch();\n    const login = useSelector<AppRootStateType, LoginActionType>(state => state.login);\n\n    let isLoggedIn = login.isLoggedIn;\n    let errorText = login.errorText;\n    let rememberMe = login.rememberMe;\n    let loadingStatus = login.loadingStatus\n\n    const [pass, setPass] = useState(\"1qazxcvBG\")\n    const [mail, setMail] = useState(\"nya-admin@nya.nya\")\n\n    const setLogin = () => {\n            dispatch(loginTC(mail, pass, rememberMe));\n    };\n\n    const setErrorText = () => {\n        dispatch(setErrorTextLoggedInAC(\"\"));\n    };\n\n    const onChangePassword = (e: ChangeEvent<HTMLInputElement>) => {\n        setPass(e.currentTarget.value);\n    }\n    const onChangEmail = (e: ChangeEvent<HTMLInputElement>) => {\n        setMail(e.currentTarget.value);\n    }\n    const onChangCheckbox = (e: ChangeEvent<HTMLInputElement>) => {\n        dispatch(changCheckboxLoggedInAC(e.currentTarget.checked))\n    }\n\n    if (isLoggedIn) {\n        return <Redirect to={\"/profile\"}/>\n    }\n\n    return <div onClick={setErrorText}>\n        <p> Please fill in the blank fields and press LOGIN </p>\n        <p>or use common test account credentials:</p>\n        <p>Email: <b>nya-admin@nya.nya</b></p>\n        <p>Password: <b>1qazxcvBG</b></p>\n        <form className={s.register}>\n            {loadingStatus === 'loading...' ? <div>{loadingStatus}</div> : ''}\n            <div>\n                Email\n                <input\n                    type=\"email\"\n                    name=\"email\"\n                    value={mail}\n                    onChange={onChangEmail}\n                />\n            </div>\n            <div>\n                Password\n                <input\n                    type=\"password\"\n                    name=\"password\"\n                    value={pass}\n                    onChange={onChangePassword}\n                />\n            </div>\n            <input\n                type={\"checkbox\"}\n                name=\"rememberMe\"\n                onChange={onChangCheckbox}\n            />\n            <div className={s.errorText}>{errorText !== null\n                ? <div className={errorText}>{errorText}</div>\n                : ''}\n            </div>\n            <Button\n                label={'Login'}\n                onClick={setLogin}\n                backgroundColor={'blue'}\n                disabled={loadingStatus === \"loading...\"}\n            />\n        </form>\n    </div>\n}\n\n","import {Dispatch} from 'redux'\nimport {Api} from \"../m3-dal/api\";\n\ntype InitialStateType = {\n    cardPacks: any\n    newPackTitle: null | string\n    id: string\n}\nconst initialState: InitialStateType = {\n    cardPacks: [],\n    newPackTitle: null,\n    id: ''\n}\n\nexport const packReducer = (state: InitialStateType = initialState, action: ActionsType) => {\n    switch (action.type) {\n        case 'SET-PACKS':\n            return {...state, cardPacks: action.cardPacks}\n        case 'ADD-PACK':\n            return {...state, newPackTitle: action.newPackTitle}\n        case 'DELETE-PACK':\n            return state.cardPacks.filter((p: any) => p._id !== action.id)\n        default:\n            return state\n    }\n}\n\n// actions\nexport const setPacksAC = (cardPacks: Array<any>) => ({type: 'SET-PACKS', cardPacks} as const)\nexport const addPackAC = (newPackTitle: string) => ({type: 'ADD-PACK', newPackTitle} as const)\nexport const deletePackAC = (id: string) => ({type: 'DELETE-PACK', id} as const)\n\n\n// thunks\nexport const getPacksTC = () => {\n    return (dispatch: ThunkDispatch) => {\n        Api.getPacks()\n            .then((data: any) => {\n                dispatch(setPacksAC(data.cardPacks))\n            })\n    }\n}\nexport const addPackTC = (title: string) => {\n    return (dispatch: ThunkDispatch) => {\n        Api.postNewPack(title)\n            .then((data) => {\n                Api.getPacks()\n                    .then((data: any) => {\n                        dispatch(setPacksAC(data.cardPacks))\n                    })\n            })\n    }\n}\nexport const deletePackTC = (id: string) => {\n    return (dispatch: ThunkDispatch) => {\n        Api.deletePack(id)\n            .then((data) => {\n                Api.getPacks()\n                    .then((data: any) => {\n                        dispatch(setPacksAC(data.cardPacks))\n                    })\n            })\n    }\n}\n\n// types\nexport type setPacksACType = ReturnType<typeof setPacksAC>;\nexport type addPackACType = ReturnType<typeof addPackAC>;\nexport type deletePackACType = ReturnType<typeof deletePackAC>;\ntype ActionsType =\n    | setPacksACType\n    | addPackACType\n    | deletePackACType\n\ntype ThunkDispatch = Dispatch<ActionsType>","import React, {ChangeEvent, useState} from \"react\";\nimport {useDispatch} from \"react-redux\";\nimport {searchTC} from \"../../../m2-bll/searchReducer\";\n// import { AppRootStateType } from \"../../../m2-bll/store\";\nimport {Button} from \"../../common/Button/Button\";\nimport s from './searchPack.module.css'\n\n// type SearchPackType = {\n//     cardPacks: any\n//     newPackTitle: null | string\n//     id: string\n// }\n\nexport let SearchPack = () => {\n\n    const dispatch = useDispatch();\n    // const cardPacks = useSelector<AppRootStateType, SearchPackType>(state => state.packs.cardPacks);\n\n    const [filter, setFilter] = useState('')\n\n    let setSearch = () => {\n        dispatch(searchTC(filter));\n    }\n\n    let onChangeSearch = (e: ChangeEvent<HTMLInputElement>) => {\n        setFilter(e.currentTarget.value);\n    }\n\n    return (\n    <div className={s.searchPack}>\n        <div>\n            <input\n                type=\"text\"\n                name={\"search\"}\n                onChange={onChangeSearch}\n            />\n        </div>\n        <Button\n            label={'Search'}\n            onClick={setSearch}\n            backgroundColor={'blue'}\n        />\n    </div>\n    )}\n\n// function searchPackNameAC(cardPacks: any): any {\n//     throw new Error(\"Function not implemented.\");\n// }\n","import { Dispatch } from \"redux\";\nimport { searchAPI } from \"../m3-dal/auth-api\";\nimport { setAppStatusAC, setErrorTextLoggedInAC } from \"./loginReducer\";\nimport { setPacksAC } from \"./packReducer\";\n\n\ntype InitialStateType = {\n    packName: string\n    min: number\n    max: number\n    sortPacks: number\n    page: number\n    pageCount: number\n    user_id: string\n}\n\nconst initialState: InitialStateType = {\n    packName: \"\",\n    min: 1,\n    max: 10,\n    sortPacks: 0,\n    page: 1,\n    pageCount: 1,\n    user_id: \"5eb543f6bea3ad21480f1ee7\"\n}\n\n\nexport const searchReducer = (state: InitialStateType = initialState, action: ActionsType) => {\n    switch (action.type) {\n        case \"SEARCH-PACK-NAME\":\n            return {...state,\n\n                // packName: state.packName.filter((word: string) => {\n                //     return word == action.packName ? word : \"no results were found for your search\"\n                // })\n            };\n\n        default:\n            return state\n    }\n}\n\nconst searchPackNameAC = (packName: string) => ({type: \"SEARCH-PACK-NAME\", packName} as const);\n\nexport const searchTC = (packName: string) => async (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC(\"loading...\"));\n    try {\n       let a: any =  await searchAPI.search(packName);\n        dispatch(setPacksAC(a.data.cardPacks));\n    } catch (error) {\n        dispatch(setErrorTextLoggedInAC(error.response.data.error));\n\n    }\n    dispatch(setAppStatusAC(\"idle\"));\n}\n\n// types\ntype searchPackNameACType = ReturnType<typeof searchPackNameAC>\ntype ActionsType = searchPackNameACType","import {Dispatch} from 'redux'\nimport {Api} from \"../m3-dal/api\";\n\ntype InitialStateType = {\n    cards: any\n    newCardsTitle: null | string\n    id: string\n}\nconst initialState: InitialStateType = {\n    cards: [],\n    newCardsTitle: null,\n    id: ''\n}\n\nexport const cardsReducer = (state: InitialStateType = initialState, action: ActionsType) => {\n    switch (action.type) {\n        case 'SET-CARDS':\n            return {...state, cards: action.cards}\n        // case 'ADD-CARD':\n        //     return {...state, newCardsTitle: action.newCardsTitle}\n        // case 'DELETE-CARD':\n        //     return state.cards.filter((p: any) => p._id !== action.id)\n        default:\n            return state\n    }\n}\n\n// actions\nexport const setCardsAC = (cards: Array<any>) => ({type: 'SET-CARDS', cards} as const)\nexport const addCardAC = (newCardTitle: string) => ({type: 'ADD-CARD', newCardTitle} as const)\nexport const deleteCardAC = (id: string) => ({type: 'DELETE-CARD', id} as const)\n\n\n// thunks\nexport const getCardsTC = (packId: string) => {\n    return (dispatch: ThunkDispatch) => {\n        Api.getCards(packId)\n            .then((data: any) => {\n                dispatch(setCardsAC(data.cards))\n            })\n    }\n}\nexport const addCardTC = (question: string, answer: string) => {\n    return (dispatch: ThunkDispatch) => {\n        Api.postNewCard(question, answer)\n            // .then((data) => {\n            //     Api.getCards()\n            //         .then((data: any) => {\n            //             dispatch(setCardsAC(data.card))\n            //         })\n            // })\n    }\n}\n// export const deleteCardsTC = (id: string) => {\n//     return (dispatch: ThunkDispatch) => {\n//         Api.deleteCard(id)\n//             .then((data) => {\n//                 Api.getCards()\n//                     .then((data: any) => {\n//                         dispatch(setCardsAC(data.cardPacks))\n//                     })\n//             })\n//     }\n// }\n\n// types\nexport type setCardsACType = ReturnType<typeof setCardsAC>;\nexport type addCardACType = ReturnType<typeof addCardAC>;\nexport type deleteCardACType = ReturnType<typeof deleteCardAC>;\ntype ActionsType =\n    | setCardsACType\n    // | addCardACType\n    // | deleteCardACType\n\ntype ThunkDispatch = Dispatch<ActionsType>","import React, {ChangeEvent, useEffect, useState} from \"react\";\nimport s from './Packs.module.css'\nimport {Button} from \"../../common/Button/Button\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {addPackTC, deletePackTC, getPacksTC} from \"../../../m2-bll/packReducer\";\nimport {AppRootStateType} from \"../../../m2-bll/store\";\nimport {SearchPack} from \"../searchPack/SearchPack\";\nimport {getCardsTC} from \"../../../m2-bll/cardsReducer\";\nimport {NavLink} from \"react-router-dom\";\n\n\nconst Packs = () => {\n\n    let [writtenTitlePack, setWrittenTitlePack] = useState('')\n    let [packTitle, setPackTitle] = useState(false)\n\n    const dispatch = useDispatch()\n\n    const addPackTitle = () => {\n        setPackTitle(true)\n    }\n    // const hideTitlePack = () => {\n    //     setPackTitle(false)\n    // }\n\n    useEffect(() => {\n        const thunk = getPacksTC()\n        dispatch(thunk)\n    }, [dispatch])\n\n\n    const packs = useSelector<AppRootStateType, any>(state => state.packs)\n    let cardPacks = packs.cardPacks\n\n\n    const onChangePackTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setWrittenTitlePack(e.currentTarget.value);\n    }\n\n    const savePack = () => {\n        dispatch(addPackTC(writtenTitlePack))\n        setWrittenTitlePack('')\n    }\n\n    const showCards = (packId: string) => {\n        dispatch(getCardsTC(packId))\n    }\n\n    const deletePack = (packId: string) => {\n        dispatch(deletePackTC(packId))\n    }\n\n    if (cardPacks === undefined) return <div>Not Found Packs</div>\n    else {\n        return (\n            <div>\n                {(packTitle)\n                    ? <div>\n                        <input\n                            onChange={onChangePackTitle}\n                            placeholder={'Enter name to new pack'}\n                            value={writtenTitlePack}\n                            className={s.inputTitlePack}/>\n                        <Button onClick={savePack} label={'Save'}/></div>\n                    : ''}\n                <SearchPack/>\n                <table className={s.table}>\n                    <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Cards count</th>\n                        <th>Created</th>\n                        <th>Lest update</th>\n                        <th><Button onClick={addPackTitle} label={'Add Pack'}/></th>\n                    </tr>\n                    </thead>\n                    {cardPacks.map((p: any) => {\n                        return <tbody key={p._id} className={s.packData}>\n                        <tr>\n                            <td>{p.name}</td>\n                            <td>{p.cardsCount}</td>\n                            <td>{p.created}</td>\n                            <td>{p.updated}</td>\n                            <td><Button label={'Update'}/></td>\n                            <td>\n                                <Button\n                                    onClick={() => deletePack(p._id)}\n                                    label={'Delete'}/>\n                            </td>\n                            <td>\n                                <NavLink to='/cards' onClick={() => showCards(p._id)}>Cards</NavLink>\n                            </td>\n                        </tr>\n                        </tbody>\n                    })\n                    }\n                </table>\n            </div>\n        );\n    }\n}\n\n\nexport default Packs;","import React, {ChangeEvent, useState} from \"react\";\nimport s from './Cards.module.css'\nimport {Button} from \"../../common/Button/Button\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../../m2-bll/store\";\nimport {SearchPack} from \"../searchPack/SearchPack\";\nimport {addCardTC} from \"../../../m2-bll/cardsReducer\";\n\n\n\nconst Cards = () => {\n\n    let [question, setQuestion]= useState('')\n    let [answer, setAnswer]= useState('')\n    let [cardTitle, setCardTitle] = useState(false)\n\n    const cardsData = useSelector<AppRootStateType, any>(state => state.cards)\n    let cards = cardsData.cards\n\n    const dispatch = useDispatch()\n\n    const addCard = () => {\n        setCardTitle(true)\n    }\n    // const hideTitlePack = () => {\n    //     setPackTitle(false)\n    // }\n\n\n    const onChangeQuestion = (e: ChangeEvent<HTMLInputElement>) => {\n        setQuestion(e.currentTarget.value);\n    }\n    const onChangeAnswer = (e: ChangeEvent<HTMLInputElement>) => {\n        setAnswer(e.currentTarget.value);\n    }\n\n    const saveCard = () => {\n        dispatch(addCardTC(question, answer))\n    }\n\n\n    if (cards === undefined) return <div>Not Found Packs</div>\n    else {\n        return (\n            <div>\n                { (cardTitle)\n                    ? <div>\n                        <input\n                            onChange={onChangeQuestion}\n                            placeholder={'Enter question'}\n                            value={question}\n                            className={s.inputQuestion}/>\n                            <input\n                            onChange={onChangeAnswer}\n                            placeholder={'Enter answer'}\n                            value={answer}\n                            className={s.inputAnswer}/>\n                        <Button\n                            onClick={saveCard}\n                            label={'Save'}/>\n                </div>\n                    : ''}\n                <SearchPack />\n                <table className={s.table}>\n                    <thead>\n                    <tr>\n                        <th>Answer</th>\n                        <th>Question</th>\n                        <th>Grade</th>\n                        <th>Shots</th>\n                        <th><Button\n                            onClick={addCard}\n                            label={'Add Pack'}/>\n                        </th>\n                    </tr>\n                    </thead>\n                    {cards.map((p: any) => {\n                        return <tbody key={p.cardsPack_id} className={s.packData}>\n                        <tr>\n                            <td>{p.answer}</td>\n                            <td>{p.question}</td>\n                            <td>{p.grade}</td>\n                            <td>{p.shots}</td>\n                            <td><Button label={'Update'}/></td>\n                            <td>\n                                <Button\n                                    id={p.cardsPack_id}\n                                    // onClick={deletePack}\n                                    label={'Delete'}/>\n                            </td>\n                        </tr>\n                        </tbody>\n                    })\n                    }\n                </table>\n            </div>\n        );\n    }\n}\n\n\nexport default Cards;","import React from 'react';\nimport {Redirect, Route, Switch} from 'react-router-dom';\nimport Error404 from '../common/Error404';\nimport Registration from '../components/registration/Registration';\nimport ForgotPassword from '../components/forgotPassword/ForgotPassword';\nimport Profile from '../components/profile/Profile';\nimport {Login} from '../components/login/Login';\nimport Packs from '../components/packs/Packs';\nimport Cards from '../components/cards/Cards';\n\nconst  Routes = () => {\n    return (\n        <div>\n            <Switch>\n                <Route exact path={'/'} render={() => <div> Hello</div>} />\n                <Route exact path={'/registration'} render={() => <Registration />} />\n                <Route exact path={'/forgot-password'} render={() => <ForgotPassword />} />\n                <Route exact path={'/profile'} render={() => <Profile />} />\n                <Route exact path={'/login'} render={() => <Login />} />\n                <Route exact path={'/packs'} render={() => <Packs />} />\n                <Route exact path={'/cards'} render={() => <Cards />} />\n                <Route path={ '/404' } render={ () => <Error404 /> }/>\n                <Redirect path={ '*' } to={ '/404' }/>\n            </Switch>\n        </div>\n    );\n}\n\nexport default Routes;","import React from 'react';\nimport './App.css';\nimport {BrowserRouter} from \"react-router-dom\";\nimport Header from \"./header/Header\";\nimport Routes from \"./routes/Routes\";\n// import {useDispatch, useSelector} from \"react-redux\";\n// import {AppRootStateType} from \"../m2-bll/store\";\n// import {initializeAppTC, RequestStatusType} from \"../m2-bll/appReducer\";\n\n\nconst App = () => {\n\n  // const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\n  // const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\n  // let dispatch = useDispatch()\n\n  // useEffect(() => {\n  //   dispatch(initializeAppTC())}, [])\n  //\n  // if (!isInitialized) {\n  //   return <div>\n  //      Loading...\n  //   </div>\n  // }\n\n  return (\n      <BrowserRouter>\n    <div className=\"App\">\n      {/*// hashrouter //  provider*/}\n      <Header />\n      <Routes />\n    </div>\n      </BrowserRouter>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport {packReducer} from \"./packReducer\";\nimport {registerReducer} from \"./registerReducer\";\nimport {loginReducer} from \"./loginReducer\";\nimport { forgotReducer } from './forgotReducer';\nimport {cardsReducer} from \"./cardsReducer\";\n\n\nconst rootReducer = combineReducers({\n    packs: packReducer,\n    register: registerReducer,\n    login: loginReducer,\n    forgotPassword: forgotReducer,\n    cards: cardsReducer\n})\n// непосредственно создаём store\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './n1-main/m1-ui/App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./n1-main/m2-bll/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n    <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Header_nav__22THU\",\"item\":\"Header_item__ssK_c\",\"active\":\"Header_active__1MFs-\"};"],"sourceRoot":""}