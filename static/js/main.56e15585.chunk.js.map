{"version":3,"sources":["n1-main/m1-ui/header/Header.module.css","n1-main/m1-ui/components/registration/Registration.module.css","n1-main/m1-ui/header/Header.tsx","n1-main/m1-ui/common/Error404.tsx","n1-main/m1-ui/common/Button/Button.tsx","n1-main/m3-dal/api.ts","n1-main/m2-bll/registerReducer.ts","n1-main/m1-ui/components/registration/Registration.tsx","n1-main/m1-ui/components/page3/Page3.tsx","n1-main/m1-ui/components/page4/Page4.tsx","n1-main/m3-dal/auth-api.ts","n1-main/m2-bll/loginReducer.tsx","n1-main/m1-ui/components/page1/Login.tsx","n1-main/m1-ui/routes/Routes.tsx","n1-main/m1-ui/App.tsx","reportWebVitals.ts","n1-main/m2-bll/reducer1.ts","n1-main/m2-bll/store.ts","index.tsx"],"names":["module","exports","Header","className","s","nav","item","to","activeClassName","active","Error404","Button","onBlur","disabled","onClick","primary","size","backgroundColor","label","props","mode","type","join","style","instance","axios","create","baseURL","withCredentials","Api","email","password","post","then","response","data","initialState","mail","checkPassword","errorText","addedUser","loadingStatus","setErrorTextAC","setLoadingStatusAC","Registration","register","useSelector","state","dispatch","useDispatch","hideErrorText","onChange","e","setMailAC","currentTarget","value","setPasswordAC","setCheckPasswordAC","res","undefined","catch","error","SendRegisterTC","Page3","Page4","authAPI","rememberMe","isLoggedIn","setErrorTextLoggedInAC","changCheckboxLoggedInAC","setAppStatusAC","Login","login","useState","pass","setPass","setMail","name","a","loginTC","Routes","exact","path","render","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","first","action","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.56e15585.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Header_nav__22THU\",\"item\":\"Header_item__ssK_c\",\"active\":\"Header_active__1MFs-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"register\":\"Registration_register__1kewo\",\"errorText\":\"Registration_errorText__2agbz\"};","import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport s from './Header.module.css';\n\nconst Header = () => {\n    return (\n        <nav className={s.nav}>\n            <div className={s.item}>\n                <NavLink to='/Login' activeClassName={s.active}>Login</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/Registration' activeClassName={s.active}>Registration</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/Page3' activeClassName={s.active}>Page3</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/Page4' activeClassName={s.active}>Page4</NavLink>\n            </div>\n        </nav>\n    )\n}\n\nexport default Header","import React from \"react\";\n\nconst  Error404 = () => {\n    return (\n        <div>\n            <div>404</div>\n            <div>Page not found!</div>\n            <div>—ฅ/ᐠ.̫ .ᐟ\\ฅ—</div>\n        </div>\n    );\n}\n\nexport default Error404;","import React from 'react';\nimport './Button.css';\n\nexport interface ButtonProps {\n    /**\n     * Is this the principal call to action on the page?\n     */\n    primary?: boolean;\n    /**\n     * What background color to use\n     */\n    backgroundColor?: string;\n    /**\n     * How large should the button be?\n     */\n    size?: 'small' | 'medium' | 'large';\n    /**\n     * Button contents\n     */\n    label: string;\n    /**\n     * Optional click handler\n     */\n    onClick?: () => void;\n\n    onBlur: () => void\n\n    disabled: boolean\n}\n\n/**\n * Primary UI component for user interaction\n */\nexport const Button: React.FC<ButtonProps> = ({ onBlur,\n                                                  disabled,\n                                                  onClick,\n                                                  primary = false,\n                                                  size = 'medium',\n                                                  backgroundColor,\n                                                  label,\n                                                  ...props\n                                              }) => {\n    const mode = primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n\n    return (\n        <button\n            disabled={disabled}\n            onBlur={onBlur}\n            type=\"button\"\n            onClick={onClick}\n            className={['storybook-button', `storybook-button--${size}`, mode].join(' ')}\n            style={{ backgroundColor }}\n            {...props}\n        >\n            {label}\n        </button>\n    );\n};","import axios from \"axios\";\n\n\nconst instance = axios.create({\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\n    withCredentials: true,\n})\nexport const  Api = {\n    postDataRegister(email: string, password: string)  {\n        return instance.post('auth/register', {email, password})\n            .then(response =>   response.data)\n    }\n}","import {Api} from \"../m3-dal/api\";\nimport {Dispatch} from \"redux\";\n\n\ntype InitialStateType = {\n    mail: string\n    password: string\n    checkPassword: string\n    errorText: null | string\n    addedUser: boolean\n    loadingStatus: LoadingStatusType\n}\nexport type LoadingStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\n\n\nconst initialState = {\n    mail: '',\n    password: '',\n    checkPassword: '',\n    errorText: null,\n    addedUser: false,\n    loadingStatus: 'idle'\n} as InitialStateType\n\nexport const registerReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'SET-MAIL':\n            return {...state, mail: action.mail}\n        case 'SET-CHECK-PASSWORD':\n            return {...state, checkPassword: action.checkPassword}\n        case 'SET-PASSWORD':\n            return {...state, password: action.password}\n        case 'SET-ERROR-TEXT':\n            return {...state, errorText: action.errorText}\n        case 'SET-ADDED-USER':\n            return {...state, addedUser: true}\n        case 'SET-LOADING-STATUS':\n            return {...state, loadingStatus: action.loadingStatus}\n        default:\n            return state\n    }\n}\n\n// actions\nexport const setMailAC = (mail: string) => ({type: 'SET-MAIL', mail} as const)\nexport const setCheckPasswordAC = (checkPassword: string) => ({type: 'SET-CHECK-PASSWORD', checkPassword} as const)\nexport const setPasswordAC = (password: string) => ({type: 'SET-PASSWORD', password} as const)\nexport const setErrorTextAC = (errorText: null | string) => ({type: 'SET-ERROR-TEXT', errorText} as const)\nexport const setAddedUserAC = () => ({type: 'SET-ADDED-USER'} as const)\nexport const setLoadingStatusAC = (loadingStatus: LoadingStatusType) => ({type: 'SET-LOADING-STATUS', loadingStatus} as const)\n\n\n// thunks\n\nexport const SendRegisterTC = (mail: string, password: string) => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setLoadingStatusAC(\"loading\"))\n    Api.postDataRegister(mail, password)\n        .then((res) => {\n            if (res.addedUser !== undefined) {\n                dispatch(setAddedUserAC())\n            }\n            dispatch(setLoadingStatusAC('succeeded'))\n        })\n        .catch(error => {dispatch(setErrorTextAC(error.response.data.error))\n            dispatch(setLoadingStatusAC('succeeded'))\n            })\n}\n\n\n// types\nexport type setMailACType = ReturnType<typeof setMailAC>;\nexport type setCheckPasswordACType = ReturnType<typeof setCheckPasswordAC>;\nexport type setPasswordACType = ReturnType<typeof setPasswordAC>;\nexport type setErrorTextACType = ReturnType<typeof setErrorTextAC>;\nexport type setAddedUserACType = ReturnType<typeof setAddedUserAC>;\nexport type setLoadingStatusACType = ReturnType<typeof setLoadingStatusAC>;\ntype ActionsType =\n    | setMailACType\n    | setCheckPasswordACType\n    | setPasswordACType\n    | setErrorTextACType\n    | setAddedUserACType\n    | setLoadingStatusACType\n\n// type ThunkDispatch = Dispatch<ActionsType>","import React, {ChangeEvent} from \"react\";\nimport s from './Registration.module.css'\nimport {Button} from \"../../common/Button/Button\";\nimport {Redirect} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../../m2-bll/store\";\nimport {\n    LoadingStatusType,\n    SendRegisterTC,\n    setCheckPasswordAC,\n    setErrorTextAC,\n    setMailAC,\n    setPasswordAC\n} from \"../../../m2-bll/registerReducer\";\n\n\ntype RegistrationType = {\n    mail: string\n    password: string\n    checkPassword: string\n    errorText: null | string\n    addedUser: boolean,\n    loadingStatus: LoadingStatusType\n}\n\n\nconst Registration = () => {\n\n    const register = useSelector<AppRootStateType, RegistrationType>(state => state.register)\n\n    const dispatch = useDispatch();\n\n    let mail = register.mail\n    let password = register.password\n    let checkPassword = register.checkPassword\n    let errorText = register.errorText\n    let addedUser = register.addedUser\n    let loadingStatus = register.loadingStatus\n\n    // let [mail, setMail] = useState(\"\")\n    // let [password, setPassword] = useState(\"\")\n    // let [checkPassword, setCheckPassword] = useState(\"\")\n    // let [errorText, setErrorText] = useState<string | null>(null)\n\n\n    const SendRegister = () => {\n        if (password !== checkPassword) {\n            return dispatch(setErrorTextAC('password is not correct'))\n        } else dispatch(SendRegisterTC(mail, password))\n    }\n\n    const onChangeMail = (e: ChangeEvent<HTMLInputElement>) => {\n        dispatch(setMailAC(e.currentTarget.value))\n    }\n    const onChangePassword = (e: ChangeEvent<HTMLInputElement>) => {\n        dispatch(setPasswordAC(e.currentTarget.value))\n    }\n    const onChangeCheckPassword = (e: ChangeEvent<HTMLInputElement>) => {\n        dispatch(setCheckPasswordAC(e.currentTarget.value))\n    }\n    const hideErrorText = () => {\n        dispatch(setErrorTextAC(''))\n    }\n\n\n    if (addedUser) {\n        return <Redirect to='/Login'/>\n    } else\n        return (\n            <div onClick={hideErrorText}>\n                <p> Please fill in the blank fields and press sign up </p>\n                <form className={s.register}>\n                    {loadingStatus === 'loading' ? <div>Loading...</div>: ''}\n                    <div>Email</div>\n                    <input onChange={onChangeMail}/>\n                    <div>Password</div>\n                    <input onChange={onChangePassword}/>\n                    <div>Password</div>\n                    <input onChange={onChangeCheckPassword}/>\n                    <div className={s.errorText}>{errorText !== null\n                        ? <div className={s.errorText}>{errorText}</div>\n                        : ''}\n                    </div>\n\n                    <Button\n                        disabled={loadingStatus === 'loading'}\n                        label={'Sign Up'}\n                        onClick={SendRegister}\n                        onBlur={hideErrorText}\n                        backgroundColor={'blue'}/>\n                </form>\n            </div>\n\n        )\n\n}\n\nexport default Registration;","import React from \"react\";\n\nconst  Page3 = () => {\n    return (\n        <div>\n            Page3\n        </div>\n    );\n}\n\nexport default Page3;","import React from \"react\";\n\nconst  Page4 = () => {\n    return (\n        <div>\n            Page4\n        </div>\n    );\n}\n\nexport default Page4;","import axios from \"axios\"\n\nconst instance = axios.create({\n    // baseURL: \"http://localhost:7542/2.0/\",\n    baseURL: \"https://neko-back.herokuapp.com/2.0/\",\n    withCredentials: true\n})\n\n// api\nexport const authAPI = {\n    login(email: string, password: string, rememberMe: boolean = false) {\n        return instance.post<LoginParamsType>(`auth/login`, {email, password, rememberMe})\n    }\n}\n\n// types\nexport type LoginParamsType = {\n    email: string\n    password: string\n    rememberMe?: boolean\n}\nexport type ResponseType = {\n    _id: string;\n    email: string;\n    name: string;\n    avatar?: string;\n    publicCardPacksCount: number; // количество колод\n    created: Date;\n    updated: Date;\n    isAdmin: boolean;\n    verified: boolean; // подтвердил ли почту\n    rememberMe: boolean;\n    error?: string;\n}\n\n\n","import {Dispatch} from \"redux\"\nimport {authAPI} from \"../m3-dal/auth-api\";\nimport {LoadingStatusType} from \"./registerReducer\";\n\n// types\ntype InitialStateType = {\n    email: string\n    password: string\n    isLoggedIn: boolean\n    rememberMe: boolean\n    errorText: null | string\n    loadingStatus: RequestStatusType\n}\n\ntype ActionsType = ReturnType<typeof setIsLoggedInAC>\n    | ReturnType<typeof setErrorTextLoggedInAC>\n    | ReturnType<typeof changCheckboxLoggedInAC>\n    | ReturnType<typeof setAppStatusAC>\n\nexport type RequestStatusType = 'idle' | 'loading...' | 'succeeded' | 'failed' | \"\";\n\n\nconst initialState = {\n    email: \"nya-admin@nya.nya\",\n    password: \"1qazxcvBG\",\n    isLoggedIn: false,\n    rememberMe: false,\n    errorText: null,\n    loadingStatus: \"idle\"\n} as InitialStateType\n\n\nexport const loginReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case \"login/SET-IS-LOGGED-IN\":\n            return {...state, isLoggedIn: action.value};\n        case \"login/SET-ERROR-TEXT-LOGGED-IN\":\n            return {...state, errorText: action.errorText};\n        case \"login/CHANG-CHECKBOX-LOGGED-IN\":\n            return {...state, rememberMe: action.rememberMe};\n        case \"APP/SET-STATUS\":\n            let a = {...state, loadingStatus: action.loadingStatus}\n            debugger\n            return a;\n        default:\n            return state\n    }\n}\n\n\n// actions\nexport const setIsLoggedInAC = (value: boolean) =>\n    ({type: \"login/SET-IS-LOGGED-IN\", value} as const);\nexport const setErrorTextLoggedInAC = (errorText: null | string) =>\n    ({type: \"login/SET-ERROR-TEXT-LOGGED-IN\", errorText} as const);\nexport const changCheckboxLoggedInAC = (rememberMe: boolean) =>\n    ({type: \"login/CHANG-CHECKBOX-LOGGED-IN\", rememberMe} as const);\nexport const setAppStatusAC = (loadingStatus: RequestStatusType) =>\n    ({type: 'APP/SET-STATUS', loadingStatus} as const)\n\n\n// thunks\nexport const loginTC = (email: string, password: string, rememberMe?: boolean) => async (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setAppStatusAC(\"loading...\"))\n\n    try {\n\n        const response = await authAPI.login(email, password, rememberMe);\n        if (response.data.password) {\n            dispatch(setIsLoggedInAC(true));\n            dispatch(changCheckboxLoggedInAC(true))\n\n        }\n        dispatch(setAppStatusAC(\"idle\"))\n    } catch (error) {\n        // throw new Error(`Unable to get currency ${error}`);\n        dispatch(setErrorTextLoggedInAC(error.response.data.error))\n\n    }\n    dispatch(setAppStatusAC(\"idle\"))\n}\n\n\n\n\n","import React, {ChangeEvent, useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../../m2-bll/store\";\nimport {\n    changCheckboxLoggedInAC,\n    loginTC,\n    RequestStatusType,\n    setAppStatusAC,\n    setErrorTextLoggedInAC\n} from \"../../../m2-bll/loginReducer\";\nimport s from \"../registration/Registration.module.css\";\nimport {Redirect} from \"react-router-dom\";\nimport {Button} from \"../../common/Button/Button\";\n\n\ntype LoginActionType = {\n    email: string\n    password: string\n    isLoggedIn: boolean\n    rememberMe: boolean\n    errorText: null | string\n    loadingStatus: RequestStatusType\n}\n\nexport const Login = () => {\n\n        const login = useSelector<AppRootStateType, LoginActionType>(state => state.login);\n\n        let password = login.password;\n        let email = login.email;\n        let isLoggedIn = login.isLoggedIn;\n        let errorText = login.errorText;\n        let rememberMe = login.rememberMe;\n        let loadingStatus = login.loadingStatus\n\n        const [error, setError] = useState(\"\")\n        const [pass, setPass] = useState(password)\n        const [mail, setMail] = useState(email)\n        // const [status, setStatus] = useState<RequestStatusType>('idle');\n\n        const dispatch = useDispatch();\n\n\n        const setLogin = () => {\n            if (isLoggedIn) {\n                // return setError('password or  email is not correct')\n                return dispatch(setErrorTextLoggedInAC(errorText))\n            } else {\n                dispatch(loginTC(mail, pass))\n            }\n        };\n\n        const setErrorText = () => {\n            dispatch(setErrorTextLoggedInAC(error))\n        };\n\n        const onChangePassword = (e: ChangeEvent<HTMLInputElement>) => {\n            setPass(e.currentTarget.value);\n        }\n        const onChangEmail = (e: ChangeEvent<HTMLInputElement>) => {\n            setMail(e.currentTarget.value);\n        }\n        const onChangCheckbox = () => {\n            dispatch(changCheckboxLoggedInAC(rememberMe))\n        }\n\n        // if (isLoggedIn) {\n        //     return <Redirect to={\"/Login\"}/>\n        // }\n        {\n            isLoggedIn ? <Redirect to={\"/Login\"}/> : <Redirect to={\"/Profile\"}/>\n\n        }\n\n        return <div>\n            <p> Please fill in the blank fields and press LOGIN </p>\n            <p>or use common test account credentials:</p>\n            <p>Email: <b>nya-admin@nya.nya</b></p>\n            <p>Password: <b>1qazxcvBG</b></p>\n            <form className={s.register}>\n                {loadingStatus === 'loading...' ? <div>{loadingStatus}</div>: ''}\n                {/*<div style={{color: \"green\"}}><b>{status}</b></div>*/}\n                <div>\n                    Email\n                    <input\n                        type=\"email\"\n                        name=\"email\"\n                        value={mail}\n                        onChange={onChangEmail}\n                    />\n                </div>\n                <div>\n                    Password\n                    <input\n                        type=\"password\"\n                        name=\"password\"\n                        value={pass}\n                        onChange={onChangePassword}\n                    />\n                </div>\n                <input\n                    type={\"checkbox\"}\n                    name=\"rememberMe\"\n                    onChange={onChangCheckbox}\n                />\n                <div className={s.errorText}>{errorText !== null\n                    ? <div className={errorText}>{errorText}</div>\n                    : ''}\n                </div>\n                <Button\n                    label={'Login'}\n                    onClick={setLogin}\n                    onBlur={setErrorText}\n                    backgroundColor={'blue'}\n                    disabled={loadingStatus === \"loading...\"}\n                />\n            </form>\n        </div>\n    }\n\n","import React from \"react\";\nimport {Redirect, Route, Switch} from \"react-router-dom\";\nimport Error404 from \"../common/Error404\";\nimport Registration from \"../components/registration/Registration\";\nimport Page3 from \"../components/page3/Page3\";\nimport Page4 from \"../components/page4/Page4\";\nimport {Login} from \"../components/page1/Login\";\n\nconst  Routes = () => {\n    return (\n        <div>\n            <Switch>\n                <Route exact path={'/'} render={() => <div> Hello</div>} />\n                <Route exact path={'/Login'} render={() => <Login />} />\n                <Route exact path={'/registration'} render={() => <Registration />} />\n                <Route exact path={'/Page3'} render={() => <Page3 />} />\n                <Route exact path={'/Page4'} render={() => <Page4 />} />\n                {/*<Route  path={'/login'} render={() => <Login />} />*/}\n                <Route path={ '/404' } render={ () => <Error404 /> }/>\n                <Redirect path={ '*' } to={ '/404' }/>\n            </Switch>\n        </div>\n    );\n}\n\nexport default Routes;","import React from 'react';\nimport './App.css';\nimport {BrowserRouter} from \"react-router-dom\";\nimport Header from \"./header/Header\";\nimport Routes from \"./routes/Routes\";\n\n\nconst App = () => {\n  return (\n      <BrowserRouter>\n    <div className=\"App\">\n      {/*// hashrouter //  provider*/}\n      <Header />\n      <Routes />\n    </div>\n      </BrowserRouter>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {Dispatch} from 'redux'\n\nconst initialState: any  = []\n\nexport const reducer1 = (state: any = initialState, action: ActionsType): any => {\n    switch (action.type) {\n        case 'TYPE':\n            return {...state}\n        default:\n            return state\n    }\n}\n\n// actions\nexport const AC = (id: string) => ({type: 'TYPE', id} as const)\n\n\n// thunks\nexport const TC = () => {\n    return (dispatch: ThunkDispatch) => {\n        // API.getTodolists()\n        //     .then((res: any) => {\n        //         dispatch(AC(res.data))\n        //         dispatch(AC(''))\n        //     })\n    }\n}\n\n// types\nexport type ACType = ReturnType<typeof AC>;\ntype ActionsType =\n    | ACType\n\ntype ThunkDispatch = Dispatch<ActionsType>","import {applyMiddleware, combineReducers, createStore} from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport {reducer1} from \"./reducer1\";\nimport {registerReducer} from \"./registerReducer\";\nimport {loginReducer} from \"./loginReducer\";\n\n\nconst rootReducer = combineReducers({\n    first: reducer1,\n    register: registerReducer,\n    login: loginReducer\n})\n// непосредственно создаём store\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './n1-main/m1-ui/App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./n1-main/m2-bll/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n    <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}